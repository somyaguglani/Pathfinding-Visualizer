{"version":3,"sources":["browser/Node.js","browser/animations/mazeGenerator.js","browser/mazeAlgorithms/randomMaze.js","browser/mazeAlgorithms/verticalSkewMaze.js","browser/mazeAlgorithms/horizontalSkewMaze.js","browser/mazeAlgorithms/stairMaze.js","browser/searchAlgorithms/unweightedAlgorithms.js","browser/animations/shortestPathAnimation.js","browser/animations/launchAnimations.js","browser/searchAlgorithms/astarAlgorithm.js","browser/searchAlgorithms/weightedAlgorithms.js","browser/animations/launchInstantAnimations.js","browser/index.js"],"names":["Node","id","status","weight","previousNode","direction","distance","Infinity","totalDistance","heuristicDistance","path","mazeGenerator","board","speed","currIndex","setTimeout","currElement","wallsAnimationArray","split","i","j","currNode","allNodesArray","className","length","toggleButtons","specialNodes","randomMaze","type","row","height","col","width","random","Math","document","getElementById","limit","includes","verticalSkewMaze","rowsi","rowei","colsi","colei","orientation","outerWalls","getNode","push","possibleRows","possibleCols","randomRI","floor","randomCI","currentRow","columnRandom","currentCol","rowRandom","horizontalSkewMaze","stairMaze","unweightedAlgorithm","start","target","starting","queue","visitedNodes","currentNode","shift","pop","nodesToAnimate","currentNeighbors","getNeighbors","console","log","forEach","neighbour","coordinates","parseInt","neighbors","potentialNeighbor","toString","unshift","name","addShortestPath","shortestPathNodesToAnimate","drawShortestPathTimeout","currentNodesToAnimate","timeout","currentIndex","shortestPathChange","istarget","currentNodeElement","previousNodeElement","element","launchAnimations","success","reset","change","specialClasses","astarAlgorithm","unvisitedNodes","closestNode","updateNeighbors","currentClosest","index","splice","manhattanDistance","firstNode","secondNode","firstNodeCoordinates","map","coordinate","secondNodeCoordinates","x1","y1","x2","y2","deltax","abs","deltay","neighbours","updateNode","targetNode","actualTargetNode","getDistance","distanceToCompare","nodeOne","nodeTwo","currentCoordinates","targetCoordinates","weightedAlgorithms","launchInstantAnimations","shortestPathNodes","gridContainer","querySelector","navbarContainer","navHeight","offsetHeight","mainContentContainer","Board","algoComplete","algo","tutorialContentArray","pressedNodeStatus","mouseDown","keyDown","buttonsActivated","previouslyPressedNodeStatus","previouslySwitchedNode","previouslySwitchedNodeWeight","prototype","initialize","contentInitialize","createGrid","addEventListeners","tutorialWork","restOfListeners","htmlOfGrid","gridRow","allNodesRowArray","nodeStatus","newNode","innerHTML","currentNodeId","addEventListener","e","preventDefault","changeNormalNode","changeSpecialNode","redoAlgo","previousElement","currNodeElement","unweightedalgos","clearPath","instantAlgorithm","clearWeights","clearWallsAndWeights","clearStatus","specialStatus","startNode","startNodeElement","targetNodeElement","counter","modal","modalInner","tutorialButtonsFlex","querySelectorAll","tutorialButtons","button","currentTarget","classList","value","style","display","algoOptions","mazes","speeds","visualizeButton","clearLinks","option","add","maze","link","remove","logo","dropDowns","algoDescription","clearBoard","location","reload","linkButton","dropdown","a","toggle","weightCancellable","currentMaze","contentHeight","docHeight","documentElement","scrollHeight","docWidth","scrollWidth","window","keyCode"],"mappings":";;;;;;AIAA,AFAA,AGAA,AFAA;AHAA,AQAA,AGAA,AJAA,AKAA,AREA,AFAA,AGAA,AFAA,AOEA,INFM0B,AFAFA,AGAEA,AFAAA,YCAY,AFAF,AGAE,AFAA,GCAG,AFAF,AGAE,AFAA,mBCArB,AFAA,AGAA,AFAA;AHAA,AOAA,IAAMwD,KPAGlF,IAAT,CAAcC,EAAd,EAAkBC,COAG,GAAG,EPAxB,EAA0B,KOApBgF,eAAkB,CAACtE,KAAD,EAAQgB,IAAR,EAAiB;APCvC,AOAA,AKFF,ARGA,AFAA,AGDA,AFCA,AGJA,IFIM6B,AFAA9B,AGDA+B,AFCAnB,EIDA0B,CPAChE,EAAL,GAAUA,CKAG,CLAb,AECc,EGDE,CEAhB,ALCiB,GCAG,ECAE,CDAC,ECAE,ACDrByD,CHCA/B,MCAAY,ECAAkB,ACDY,CAAC7C,CHCA,CAACA,GGDF,EHCC,AGDU,EHCFgB,IAAR,ACAM,CACvBhB,CDDkC,EEAT,CACzBA,CDDuB,EAEvB4B,ECFyB,EAEzBA,CDFuB,EAGvBC,ECHyB,EAGzBA,CDHuB,EAIvBC,ECJyB,EAIzBA,CDJuB,EAKvBC,ECLyB,EAKzBA,CDLuB,EAMvBC,ECNyB,EAMzBA,ODNuB,EAOvBC,ECPyB,EAOzBA,MDPuB,EAQpB,ECRsB,EAQtB;AJRH,AOAAoB,AHSA,AFRA,AGDA,AFSA,AGXF,ECEEA,IHSIxB,ACTAZ,AFSAY,CHTCvC,AECA,EGDE,EDSE,AFRA2B,ACQA,CETCjB,CLAV,AOAW,CHSC4B,AFRA,ACQAA,EHTEtC,AOAAU,CLCC,AGDA,CHCf,AGDgBkB,CDSZ,ADAA,CDRcD,CKDC,CPAnB,AOAoBiB,CHSCH,AFRA,ACQAA,CETX,EHCc/B,CGDC,CDSC,ACT1B,AFS0B,CITZ,CAAcA,CHSC8B,AFRA,ACQAA,CDRCZ,GKDG,CAACgB,AHSlC,ADAA,ECAoC,AFRpC,ACQoC,EDREjB,GKDV,ALCa,CKDCjB,CLC1C,EAA6C,EKDE,CAACiD,MAApB,EAA4BzD,YAA1C,CAAd;APCA,AYHF,AVII,AGDF,ACDF,IAAMuD,EDCA5B,CLAC5B,EECE,AGDA,GAAG,CLAV,AECW4B,AGDX,GLAc,AECA,CFDd,EECiB,CAAf,EAAkBA,CIFG,EJEA,CIFG,EJEAnB,KAAK,CAACoB,CIF5B2B,IJEF,EAAqC5B,GAAG,EAAxC,EAA4C,MIFpB,CAACnB,KAAD,EAAQgB,IAAR,EAAiB;ANE3C,AODA,AHSA,AFPI,ACOJ,AGTA,MFSI,ADAA,AGRFhB,CNAGR,AIQAyC,ADAAA,EITEoB,CLEChC,CIDD,CAAC2B,IJCM,CEOd,ADAA,AGRE,CAAYpC,CNAd,AIQiB,AFPAU,ACOA,CITC,CAACjC,CPCC,CODb,ALEc,CAACgC,AIDpB,ENAF,EOD0BrB,CDCD,CJCR,AIDf,EJCE,CKF2B,CAACgD,ADE9BhD,KCFF,ADEO,CAACiD,CCF+B,KDErC,CAAarC,MAAb,KAAwB,CADxB,IAEAZ,KAAK,CAACgD,KAAN,KAAgBhD,KAAK,CAACiD,MAHxB,EAIE;ANFF,AODEjD,AKHJ,ARYI,AFPE,AGFJ,AFSE,AMfJ,AHUI,ICJAA,GPCGP,EODE,AHSA,ACTAwB,AFSA,CITCsD,ALEEnE,CIED,CDJC,CDSCa,ADAAA,EETE,CLCb,AIQc,ACTP,AFSO,AGLZ,GNHe,AIQA,ADAA,CCAf,ACTgBE,AFShB,CDPmB,CEODF,ADAAA,CHRpB,AKDqB,CHEGM,CEOD,ADAA,CETCvB,EDSEA,ADAAA,GETG,CHEG,AGFFoB,CDSC,AFPEI,ACOF,CCACN,ADAAA,EIT9B,CAAiCkD,AFAnC,EAAqC,CDSnC,ADAA,ECAsCnD,ADAAA,EITtC,CAAyCoC,AHSA,ADAA,ECAzC,AFPsB,ACOtB,ECA6C,ADAA,OIT7C,ELEiDpC,GAA3B,cAAkCE,GAAlC,EAApB;AFAJ,AIQI,AFPA,AGFF,AFSE,AMfN,AHUG,ONHIzB,CKDGe,EHEEA,CEOD,ADAA,IHRT,AIQaU,ADAAA,CETG,ELCAxB,AIQA,AFPE,ACOF,CETGK,EDSA,AFPEA,ACOF,CCAf,ADAA,ECAkBmB,ACTE,AFSFA,CETGT,CLCzB,AEC0B,CEOD,AFPEA,ACOF,GCAGV,ADAAA,KCAK,ADAA,CCACoB,ADAAA,EETf,CAAoBH,CHElB,CEOjB,AFPqCA,ACOrC,CETe,CDSsBE,ADAAA,CDPpB,AGFuBA,EDSA,AFPEA,ACOF,CETzB,CDSf,ACTF,AFSE,CDPiB,CEO2B,AFP5C,ACO4C;AHPhD,AOFE,AKHJ,ARaQ,AFPF,AGFF,AFSI,AMfR,OTOOvB,COFCoB,AFCEZ,EHEAqB,EKHE,AHUEhB,ADAAA,GDPC,GAAGO,CGFG,CLCnB,AIQoB,ADAA,EDPA,AGFEO,CLCD5B,AOFnB,AHUqBK,ADAAA,EIVA,GHUK,ADAA,CCACkC,ADAAA,CETC,CLC9B,AKD+BV,EHEf,GEOO,AFPW,ACOX,IDPP,GAAyB,EGFnB,EDSkBP,AFPpC,ACOoCA,GCAjB,ADAA,MET0BA,GAA3B,KDSyBE,ADAAA,GCAxB,ADAA,ECAjB,ADAA,IETkDA,GAAlC,EAApB;ALEF,AOFII,AEJN,AHQE,MCJIA,ADIA2B,CNFCrD,OOFO,ADIA,CCJC2B,EDIExB,KAAK,CAACkC,CNFrB,GAAyB,EOFrB,CAAwBmB,ADIb,CNFf,AME6BrD,KAAK,CAACgD,ICJI,CAAC3D,ADIzB,CAAf,CCJI,EAAwCsB,SAAxC;APGJ,AOFG,AKJL,ARaQ,AFPF,AGFF,AFSI,AMZR,AHOE,AIPF,MJOMwC,CNFCrD,CKFC,CAACgB,CHECO,CFAR,AMES,CFKC,ADAA,CCACP,ADAAA,CHPC,AMEA,CAACoC,CJFC,EFAd,CEAiBzB,EGFE,CAACC,CCIR,CJFJ,AIER,CFKuB,ADAA,CCACA,ADAAA,EDPE,CAACZ,CGFpB,CAAsBL,GDSlB,ADAA,CCAsBA,ADAAA,IETI,CAACnB,CHEC,CAACoC,CEOC,ADAA,CCACpC,ADAAA,EETnC,CAAL,EAA6C,CDSpC,AFPgB,ACOhB,CCAL,AFP2Cc,ACO3C,ECA6C,ADAA,SDPS,CAACO,SAAlC,CAAvB,EAAqE;AFCzE,AIOQ,AFPF,AGFFF,AFSI,AMXV,AHME,AINF,IDAM6E,ACAA+B,ELEA5G,ACIA2C,CNFC3D,KEAKuB,EEQAC,ACVE,AFUFA,CEVG3B,CLEb,AEAc,CEQD,ADAA,CMZK,AHMF,CNFC,EKFb,AIFiB,AHMF,CFMD,ADAA,AOZI,CVItB,AIQU,ADAA,EOZe,ENaf2B,AFTJ,ACSIA,EDTiB,CESd,ADAA,AMbTqE,ICAA+B,CNacrH,ADAAA,KCAK,ADAA,CCACkB,ADAAA,GMbH,CAAClB,ELaJ,ADAA,GCAe,ADAA,AMbZ,CLYX,ADAA,CMZsB,ACAP,CAACA,ENchBmB,ADAAA,GCAG,ADAA,AOdY,EAAQH,GNcf,ADAA,CCFR,ADAA,AOZe,EAAiB,ENehCG,ADAAA,GCAG,ADAA,KCAKnB,ADAAA,KCAK,ADAA,CCACoB,ADAAA,KCAN,ADAA,GCAc,ADAA,CCJxB,ADAA,ECKE,ADAA;AHXX,ACbD,AMUIiC,AKJJ,ARmBY,AFZFjD,AGFJJ,AFcM,AMhBV,AHKqBkD,AILrB,IHCEG,ADImBH,EDHjBlD,AIDFA,ACDEgB,IRIIZ,AQJA,CLEC,AIDF,CJCGC,AIDF2C,AHIqB,EAAE,CCJlB,CHeG5C,ADAAA,CMfd,CFAcJ,AEAFY,GPGK,CAACD,AQJpB,CHCqB,CAACuB,AEApB,ACDoB,GNgBK,ADAA,EMfF,CLeKX,ADAAA,AMf5B,CFAc,ALGR,AGFJ,AKFyB,CHCC8B,AFCAlB,EIA5BnC,EJAE,CAA+BI,CDcG,ADAA,CCACoB,ADAAA,AMdhC,CAACyB,GFDiC,CAACzD,EECxC,CAAaoB,CJAX,KDc0B,ADAA,AMd5B,GFDc,CAAd,CECwB,CADxB,CCD0CZ,GDG1CA,CLauDiB,ADAAA,COhB5B,CAAP,CNgBQ,ADAA,CMbvB,CAAC+B,KAAN,KAAgBhD,ELa8CmB,ADAAA,GCAlC,ADAA,AMbP,CAAC8B,CLad,ADAA,KMhBV,EAIE;ARXJ,AMSG,AHeSjD,AFZFS,AGFL,AFcOT,AMZR,AHAiB,GAAnB,CLZID,MCYIU,COAC,CLYCT,ADAAA,IMZR,CRZe,AGwBF,ADAA,CCACK,AFZA,ACYAA,CDZCf,CDZG,KCYZ,IDZJS,QGwBM,ADAA,CCA0BoC,ADAAA,IFxBhB,AGwBV,ADAA,CFxBWnC,AGwBoBI,ADAAA,KFxBrB,EAAW,IGwBrB,ADAA;AKxBZ,AGAA,AVCE,AMSD,AKLD,ARoBYK,AFZFA,ACYEA,AMZT,ACJD,CHTF,EAYA,GNXMR,ASSFD,IRGMS,CDZC,ASSF,CNeGA,ADAAA,AOfFuC,ETTI,CDYC5D,ACZb,ESSE,CRGc,AQHFwB,CRGGrB,CEYC,ADAA,CCACD,ADAAA,GOfjB,CRGM,EEYE,ADAA,CDZgB,CAAlB,AQHiB,CAAvB,IACAU,KAAK,CAACiD,MAAN,CAAarC,MAAb,KAAwB,CADxB,IAEAZ,KAAK,CAACgD,KAAN,KAAgBhD,KAAK,CAACiD,MAHxB,EAIE;AFXJ,AGAA,AVAE,AGwBS,AFZF,AGHLhC,AFeO,AGxBkC,AIYzC,IFZEgE,AGAAqC,ANSFrG,EJTEjB,CISC,EHDC,EDRG,ASYA,CTZCC,GCYG,CQAX,CTZE,ECYae,CMZG,GAAG,ANYF,ISZM,CVA3B,EUA8B,AVAFf,EOAxBgF,GPA6B,CCYpB,EDZuB,ACYA,CSZhCqC,AVAwB,CAA5B,KACK,GODkB,CAACtH,APCfA,KODc,APCT,CAACC,CODgBiF,IPCtB,EUDqB,CHAP,AGAQlF,EHASgB,GGAV,CHAP,CGAekE,CHAW,GPC5C,EAA+BjF,CUDN,EAAiBe,EVCN,EUDX,CVCc,CUDY,CVCpB,CAA/B,KACA,IAAIhB,KAAK,CAACC,KAAN,WAAJ,EAA4BA,KAAK,GAAG,EAAR;AODjC,AGAA,ACGF,ARqBS,AFZCG,AGHNe,AFeK,AMZPnB,AHAE,AIAD,EDADA,EJHEmB,EGTEqC,AGAE4B,CNSD,AIGA,CAAClD,AHAAmB,EJAEjD,ESZI,GAAG,AFYf,CAAcJ,GHAG,CEZC,CNYC,AOAA,CPACW,AOAAqC,AHAAhC,EKZdoE,ELYkB,CGAxB,EAA2B1F,CEZZ,CAAC2D,ATYR,MOAR,GAAsC,CAAtC,CDZyBrD,AGAV,EAAcR,CLYT,EEZU,CAACgE,AFYeL,KAAK,CAACG,EKZrC,EAA+B,CLYA,EAA1B,CEZF,CAAlB,CFY8DH,KAAK,CAACI,GAAN,EAA5D;AKXA,AVJ6B,AG4B1B,AFZG9C,AGHP,AFeI,AMZLT,AHAEA,EGAFA,EHAEA,GGAG,CEZC8E,AFYA5C,CHAC,CJACzB,AIAA+C,KGAR,CAAcxD,EPAE,CAACV,EOAE,CAAC0D,EHAlB,CJAM,AIAeb,CKZC,CFYxB,CPA0B,CSZCZ,AVGrBrB,AQSqBN,AHAzB,CAA0ByD,OKZO,CAAC7B,AVJL,CCgBvB,EIAN,CGAF,GAA2C,CAA3C,MEZ2B,CAAwB6B,WAAW,CAAChE,EAApC,CAAzB;AHAF,AGCE,AVMAc,AWJJ,ARsBK,AFZKM,ACYL,AMZHT,AHAE,AIDFA,EDCAA,ACDAA,ETLEG,EOPEF,CCaC,ACDA,CCXGoF,AFYFnD,AHAAlB,AIDAkB,ERCEzB,CMbC,CFaC,EEZRT,APMU,CAAC,AQMb,ACDA,CDCcA,ACDAA,ERCE,CMZT,ANYUT,CMZTU,CCYW,ACDA,CCXG,AFYF+C,ACDAA,GFXlB,AGAuB,ATYjB,EDNW,AQMnB,ACDA,CRC0B,COACvD,AHAzB,AIDyBC,CRCnB,CIAqB0D,MID7B,CDCA,CDZ2B,CAAzB,AEWoC,CAAtC,EFX+BpD,AFYU,CAACqD,IEZN,CAACpD,KAAN,CFYsB,CAACZ,EAAb,CAAZ,GAA+B,IAA/B,KEZ8B,GAA5B,GAAkC,GADjE,0BGCE;AVOE,AMEN,ALIS,AGJP,AIIA,AHAEgE,AIDFrD,EAAAA,EHHIwE,ADIFnB,EGAEkC,CCDC,CAACrD,CLHCjB,CJFGb,EIEA,GAAGJ,ACIA,AIDb,CJCcV,AIDAU,ILHI,AIIA,CRNG,AIEFkB,AKGA,CJCjB,AIDkB8B,CDCC,CRNGhD,CQMxB,EFJ2B,AFAd,AKGb,ETL6B,ASKFP,CTLGY,AMEA,AFAF,CAArB,IAA0Bc,GAAG,AKGpC,CHHIqD,EFAmCxE,KAAK,CAACoB,EJFrB,CAA0BlB,EIElD,EAAoD,KJF5B,CAApB,EME0B,CAACF,KAAD,EAAQgB,IAAR,EAAiB;ACP/C,AGIE,AJIF,AHeEiB,AFXG,AGJH,AFeAA,AGXA,AIDF,INYEA,ADAAA,EKvBIyC,ADQFrB,AGGAkC,ECPE/F,ANIEiB,ACIF4C,KEZO,CJuBD,ADAA,EKvBI,CDQhB,AHee,ACfC,AFeD,EGXE,CKRf,ANIiBrD,ACIDX,AIDA,CNYhB,ADAA,CQnBkB,ALQd,CIDe,EFXfqF,AHQkB,AKGxB,CLHyBhE,CCIAV,KEZT,AFYc,CEZbE,AFYc+C,MDJZ,ACIjB,CDJqChC,CCIA,CEZvB,CHQG,CGRY,CHQaE,GAAzB,CAAjB;AGPAhB,AGIE,AVDe,AMKnB,AHeC,AFXE,ACWF,AMZD,AHAuC,IEXrCA,EDQEsE,CEGC,GEPGM,CFOC9D,GDXG,ACWA,CDXC,ECWE,CAAf,EAAkBA,GAAG,GAAGjB,CDXC,ADQA,EIJE,CJIC,CEGC,CEPCuB,AJI9B,AEG8BL,ERNXd,IQMnB,EEPsC,AFOAa,CEPCO,EFOE,ERNX,AQM9B,CRN+BnC,CQMc,CRN1B,CAAeiB,KAAf,CUDW,CAAwBd,GVDnC,SUC+C,CAACH,EAArC,CAA1B;AHHA,APEe,AMMnBgE,ALIC,AGLC,AIIA,AHDqC,AIAvC,EHFAA,KGEK,CLHGjD,CIID,CDXCF,CEUCe,EHFE,AEGAE,CCDC,EHFEnB,AEGA,CCDC,CAAf,CFViB,ACWA,CJJE,AIIjB,ACDgBiB,CHFC,CAACiB,AEGAf,CJJEI,AKGD,CFVCiC,CCWC,CCDCxD,EDCEA,CFHZ,CAAcA,CFDE,AKGD,CLHEwB,AKGDN,CDCC,CAACE,CFHC,CAACc,ECRE,AEUpC,CFVqCtB,ACWnC,CCDoCK,CDCCE,EFHX,AGEa,CHFCnB,AEGA,CDXtC,AEUJ,CLHsB,AIIpB,CDX2C,AEUA,CDCC,CFHC,CAACiD,MAApB,CFDqBhC,CECOzB,EFDlC,UECR,CAAd,GFDwD2B,GAAlC,EAApB;AGNInB,AGGF,AVFe,AGsBnB,ADAA,AMZIuF,AHDF,AIAA,MNaEvD,ADAAA,AMZAuD,EDXEvF,AFUAyD,CIAC,CCPC,AVAGlD,CUAF8E,AVFU,EODR,AEUAlE,CFVCqC,EEUE,CNaC,ADAA,EObE,CDCC,ACDhB,CDCiBrB,CCDChB,EJAE,CKPC,AFQnB,ACDmB,CCPCO,CLOCgC,CEVnB,AEUoB1D,GFVG,EAAvB,AEUyB,CCPtB,APoBT,ADAA,AObgCoB,CCPC2D,CPoBC,ADAA,AMZP9D,GAAvB,AHDiC,AIAnC,CJAoCoC,CIAClC,GAAG,EAAxC,EAA4C,GJAG,CAAC9B,CGChB8B,CERkB,ALOf,CKPgBR,CFQjD,AHDkDX,KAAjB,EAAwBgB,CKPpD,CAAL,EAA6D,ALO5B,CAAnC;AKNI+D,AVHa,AMOnB,AHgBE,AFZF/E,AGLE,AFiBA,AMZC,AHDD2D,AIAE4B,ERCJvF,EIDE2D,EIAE4B,CRCC,CSRCR,APoBA3C,AFZAvB,AGLA,AFiBAuB,CIhBCiB,AFDAvC,CJJON,CAFK,AKUV,CAACoD,GAAR,CAAYP,ICHI,AHgBA,ADAA,AObA,CHHChE,ALInB,AGLmB,AKIA8C,CLJCT,CECb,AHgBc,ADAA,ECAnB,ADAA,AObE,ECPqB,ALOA,CKPCf,AJIAX,ADGAX,EDJnB,ACIL,CDJ2BoB,CCICgD,CCHC,CAACT,EGGL/B,CCPrB,EJIN,AGGI,CCNIzB,ANE6B,CECE,AFDDF,MAA/B,CAAL,ACIA,EDJ6C,EMF3B,CAACC,ADMa4B,GAA9B,GCNI,KAAwB,EAAxB,6CADF;AHHA,AGOD,AJCHsD,ALIH,AGLKhE,AIKH,AHDCgD,AIAC,CRpBL,GKiBIgB,ADGAhB,EDJEhD,MGPMyE,GHOE,CAAC5F,GGPP,CFWY,CEXC,AFWAuE,CDJf,GECmB,CAACO,EDGtB,CAAyB,ICHzB,CAA8Bf,KDGJS,MCH1B,GDGyB,EAAe;AEVlC,AGOL,AVLC,AMMFT,AHeA,AChBErD,AFgBF,AGZE,AIAH,IHHCqD,EFDErD,GDgBG,ADAA,CFrBGS,AKSF,CDJC,ACIA2C,CDJC/C,CDgBCH,ADAAA,CKtBDqB,CDOG,GNNK,AMMFvB,GNNKA,CODH,AJsBE,ADAA,CKtBDwB,ADOE,ADGA,CCHCU,ADGA4B,CFYClC,ADAAA,CFrBG,CAAClB,GGqBzB,ADAA,CIfc,AFDZ,CEC0B2C,AHeAnD,AChBAiC,AFgBAjC,CGZT,CAAjB,EDJA,ACI8B,CEVxB,AHMyBE,CGNDJ,EPCb,CAAoBO,AGqBF,ADAA,CFrBlB,CODkB,ADOE,CCPD0C,APCIzC,AMMFhB,CNNrB,AGqBsBqC,ADAAA,CFrBvC,GIKA,CGNM,AJsBR,ADAA,EKtB8ClB,AJsBET,ADAAA,IIflC,CAAd,ICPQ,AJsBiD,ADAA,ICAI,ADAA,CCA7D,ADAA,ECAgE,ADAA,qBKvB1D,EAGE;AACAqB,AGIT,AVLGnB,AMMH,AHeGgC,AChBD,AFgBCA,AMXJ,AHDM,GKrBN,GVYIhC,AGqBAgC,ADAAA,GMXGmD,GDTGhE,AFQAP,GJCGD,CIDC,CLTC,CAACJ,AGqBA,ADAA,CCACwB,ADAAA,CKpBC,CAACX,EJoBf,ADAA,AMXiB,CLWCtB,ADAAA,AMXAU,GRVlB,GACEH,AQSN,EAA8B,CLW1B,ADAA,EKpBM,AFQJ,CEPMT,CFOuBoD,CLRrB,CAAC7D,EOCE,CAAC0D,GPDZ,GOAI,CFQqC,CENnCtC,APFc,AKQsBmD,CLR1C,QOAI,AFQqC,CAAZ,GAA0B,IAA1B,cLT/B;AOIK,AJkBN,ADAA,AMXD,AHDI9D,AIAN,QDCMqD,AHDArD,CIACuF,IJAI,CAACrD,KGCK,EHDX,CGCcsD,AHDA1B,CIAC,CAAClD,MAAtB,CJAM,CIAwB,CDCC,AHDApB,CGCCQ,KAAD,EAAQuF,IHDjC,GAAwClC,OGCf,CAA7B,GHDuD,CAAChE,EAApD;AKHN,AVJI,AMKJ,AFFE4B,ACKIkC,AIAJ,ILLAlC,EMCI2D,AJCAF,CFFD,CCKCvB,AIAAE,ETREnD,GMKK,ADGF,CAACiC,ECHI,EDGV,CLRW,AKQAnC,AIAA,GAAGwF,ECJI,AVJFxF,AKQA,CCHhB0E,ADGiBxC,EKJI,EVJA,CAAC7B,EMKZ,ADGC,CCHAsE,ADGcb,AIAA,CAAC9D,ECJ1B4E,GDIyB,EAAQW,CJAtB,CAAX,ECHU,EAAkB,ENLZ,CAA0B3E,IUIrB,CAACyC,ADIG,CTRT,ASQpB,GTRuD,CAArD,EAAwD,IUIjC,EAAc7D,YAAd,EAA+B;AHFlD,AGGN,AVJIQ,AMKJ,AHeA,ACjBAmB,AFiBA,AMZA,AHAG,IDLHA,GAAG,CMCC2D,AVJA9E,AMKA,AHeAqC,ADAAA,CIfCoC,EEGEpB,ERRE,CAAChD,MGoBM,ADAA,EMZE,CLYC,ADAA,AMZAf,ELYnB,ADAA,CQhBsB,GAAGiC,AFIlB,CFHmB,CAACX,ENLvB,GAA4B,CUIC,AJCjC,CIDkCY,AVJ9B,CMK+B,KEGK+D,QEJf,CAAwBlC,KFIK,CAACzC,GDPzBZ,EGG8B,CAACX,AFI7D,EDPM,AGGmB,AFIsC,CEJ/D,CHHqC2B,IAA/B;AACAhB,APDFA,AMKFyE,AFFH,AIKGpB,AHAD,AIDD,KJLA,CCGEoB,AEGApB,ERRErD,EOCEA,CEMCqD,ETPE,CAACxC,COCC,CAAC0D,CCOC,GAAGiB,ECDE,CAAClG,ITPf,AMKmB,CAAC6C,CGEjB,EDCoB,CFHzB,AEG0BnC,CFHCA,IEGF,CFHO,CAACkC,AEGAqD,GDP7B,EEMkCA,CFNC,CDIZ,CCJvB,ADIqCvF,KAAK,CAACgD,AEGtB,CAAzB,IFH2B,AGEyB,CHFpD,AGEqDpC,MAAvD,EAA+D;AFLzDZ,AGEN,AVHG,AMKF,AHcD,ADAA,AMXC,AH3BwC,AI0BvCqD,MAAAA,ECJErC,CPgBC,ADAA,CKlBChB,EGEE,CPgBCE,ADAAA,EKlBE,CAACiF,CEMC,GAAGK,CFNV,EJkBY,ADAA,GCAG1D,ADAAA,GQhBrB,EAA2B,APgBD,ADAA,AOZC,CAAC9B,ENYC,ADAA,CCA7B,ADAA,ECAgCE,ADAAA,AOZL,EAAQqF,QNYM,ADAA,ICAIxD,ADAAA,EOZlB,CAAzB,ENYgD,ADAA,GCAG,ADAA,CCArD,ADAA,ECAwD7B,ADAAA,UCAS,ADAA,ICAI,ADAA,CCArE,ADAA,ECAwE,ADAA;AKjBlE,AGEJ4E,AVHD,AGmBCzC,AChBJ,AFgBIA,AOZD,KTlBS,CUcRyC,APgBAzC,ADAAA,CFnBCpC,EIGEgB,GJHG,AIGA,GAAG,CJHCf,AIGP,EDgBS,ADAA,CCACiC,ADAAA,CEhBChB,GDgBd,AChBiB,AFgBjB,CQhBkB,APgBAjB,ADAAA,CQhBCS,AVHA,CIGCX,EJHE,CAAhB,CAXE,CAAV,AIc2B,CAACoB,EMA1B,APgBA,ADAA,GEhBoB,GAAc,CAAtC,EAAyC;AGDlC,AGEJ,AV1B4B,AM2B7BjB,AKnBJ,ARkCK,AChBD,AFgBC,AMZD,AHhBF,ICaEA,AKnBEqH,CDgBF,GNEM/G,AIIF4C,CDnBA,AFGCF,EKYE,GJCG,ADbA,CEUC,ADGA,ADbAvC,EMNI,CPkBD,CIIC,CGtBGW,AHsBF7B,CJJCM,ACZnB,EAAqB,GDYG,CECC,AFDAU,COlBG,AHsBtB,CGtBuB+G,IHsBE9H,OJJZ,CAAoBsB,AIIrC,CGtBkB,CHsBqB,CJJtB,EAAyBE,GAAzB,CAAjB,AII8C,CGtBlD,IHsB2C;ADLjCnB,AGEJ,AJCA,AKnBN,AHsBIA,AHjBmB,AIgBnB,IErBE0H,AHsBF1H,ICDIqD,CDCC,CDNCrD,AGEAqD,AJCAsB,AEGAnB,KDNK,CAAC2B,GIhBK,AFqBF,CAACzF,CFLV,AGEW,CAACD,AJCA,AKnBE8B,EHsBpB,CAAqBY,EFHE,CAArB,AGEE,CDCJ,CFH0B,AKnBE,AHsBFkB,CEJpB,AClBuBoE,EFqBA9H,OCH3B,CFIF,ACDA,CCHsC,CDGC,CErBnB,oBAAxB;AJiBUK,AGEF8E,AVtBN,AMuBMF,AKnBR,ARkCI,ACjBA,AFiBA,AMZAvB,ACDE,IErBFsE,AHsBAtE,GRzBA,CUqBIyB,AJCAF,AHeAtC,ACjBElC,AFiBFkC,EKlBEtC,CPnBFE,EWGK,AFqBA,EFLE,ACMA,CDNCW,AIhBA6G,ARkCA,ADAA,AMZApI,ECDV,CNaagC,ADAAA,CFrCF,CIoBI,CIKjB,CRzBgB,AGqCG,ADAA,CFtCrB,AGsCsBiB,ACjBAhB,AFiBAgB,EQhBE,AVpBtBrC,AMqBsB,CIDCS,AJCA8D,ECHjB,AJkBS,ADAA,CCAWnD,ADAAA,CSlCC,CAACsG,APiBA,CAACpG,CDiBC,ADAA,CFpCrB,AGoCsBH,ADAAA,CQhB3B,EVpBQrB,GGoCc,ADAA,EFpCT,CAACK,AWEtB,ERkC8C+B,ADAAA,CEjBtB,CEEwB,CAACuC,SHeS,ACjBP1D,AFiBO,CCACL,ADAAA,EIfX,AFFxB,CEEE,CNrBV,AMqBR,CNrBkCA,CGoCvB,ADAA,CCAf,ADAA,IFtCF,EAGEV,GIkBsDiB,GAAlC,EAApB,CJlBS,EAHX,EAIE;AOiBM,AGEH,AVnBH,AMoBG,AKnBP,ARkCI,ADAA,AG/BmB,AIkBlB,IErBC0G,GDgBA,AJCA,CHiBErF,ADAAA,EFtCAtC,GUsBK,AJCA,GHeG,ADAA,CQhBCmD,AJCAsB,ENpBb,AGmCerD,ADAAA,ICAI,ADAA,CSlCG,ARkCFiB,ADAAA,GSlCKhB,CDkBD,CAAC9B,AJCA,AHeV,ADAA,CCAW6B,ADAAA,EIfEmD,EHeE,ADAA,CSlCG,ARkCFpD,ADAAA,CSlCGoG,EDkBrB,GPgBa,ADAA,KCAgBpF,ADAAA,GQhBjC,AClBgB,EDkBsB,EJCE,CAACzB,IHeI,ADAA,CCACA,ADAAA,CIf9C,EAAiD,GHe3C,ADAA,CCAf,ADAA,QSlCJ,EAEA;AJeS,AGEDkE,AVPL,AMQKF,AKhBR,AR+BI,AClBA,AFkBA,AMbA,AHJD,QKCKE,AJCAF,AHeAnC,AClBA,AFkBAA,AMbAY,CJLCvC,SDkBS,ADAA,CMbC,CAACzB,CLaC+C,AClBA,AFkBAA,CElBCV,AIKd,IEHkB,AJCA,CIDCf,AJEjB8D,AECiBzE,GJLlB,CAAsBS,CIKC,CLaC,ADAA,AMbAwC,CLaCX,ADAAA,EQhB1B,GFGJ,EJLmC,AIKE,CLaR,AClBOhD,AFkBP,CCA7B,ADAA,KId2B,AFJtB,CEIuBqF,AFJ5B,EAA6C,UEIlB,CADL,EAEhBF,qBAAqB,CAACE,YAAY,GAAG,CAAhB,CAFL,CAAlB;ACFD,AGEA,AVPN,AMWM,AHYH,AClBElE,AFkBF,AMbE,ACDFT,CTjCJ,GSiCIA,ELJES,CGpBA,AGoBO,AJCA,CHiBLiC,ADAAA,COdC,CAACc,GFJG,AGEA,AJIA,GFNC,CGAGtD,AGEAmD,AJIAsB,AFNFrF,GDkBK,ADAA,GCAG+C,AClBjB,AFkBiBA,COdnB,CAAqBF,CFJC,EGEE,CAAC1C,AJIA,AGFzB,CAA0B4D,CFJC,CAAlB,EAAqB,ADMAoB,CHYC,ADAA,CCACjC,ADAAA,EQhBnB,GDEb,GNc+B,ADAA,CCA/B,ADAA,KQhBS,EAAuC,GJIG,CAAC5B,MAA3C,EAAmD;ACLxDW,AGEAuD,AJIAF,AKnBR,APaM5E,AIKD,AHLH,AIIEqD,IAAAA,ELJErD,EGAEuB,AGEAuD,AJIAF,CKnBCkD,ANaA,EDAE,CAACzH,EObZ,ANaE,CMbae,AFiBA,CFJC,AEIA9B,CFJCkC,GIbjB,EAAsBN,AFiBlB,ICFsB,AJIA,CIJCP,AJKjBX,CKpBV,EAA8B,CJatB,AHAF,CGA0BA,ADOjB,AFPiBmC,CEOhBD,GILR,ANFF,CGA+B,AHAA9B,CGAC4C,EDO5B,CAAchD,ECPhB,EAAqCW,CDOhB,CAACsC,GFPxB,GEOI,CCPF,ADMkB,EAEhBwB,qBAAqB,CAACE,YAAY,GAAG,CAAhB,CAFL,WAAlB;ACLAS,AGED,AJQA,AKvBL,AR8BE,ACjBC,AFiBD,AGjBH,CA7BD,EA+BA,IKFa,ACbNhE,CJaCgE,CJiBC,ADAA,GS9BP,CDeW,APeAnE,ADAAA,CKjBC,CAACuC,APNAzD,AWPAqB,EDeEiC,APeD,ADAA,GS9Bd,AR8BiB,ADAA,CCAf,ADAA,ECAkBpC,ADAAA,ICAG,ADAA,CQfG,CHFC,AGEAxB,CHFCS,AJiBFF,ADAAA,KCAK,ADAA,CCACkB,ADAAA,EQfjB,CHFY,CAAf,CAAN,CJiBJ,ADAA,ECAsCD,ADAAA,ICAG,ADAA,CQfhC,CPeT,ADAA,CQf+C,CPeF,ADAA;AKhB1C,AGEC6D,ACfN,AR8BI,ADAA,AMbFW,ACDA,IDCAA,GDPS,AIVNvE,CDeC4D,ADCAzB,GNcG,ADAA,EKjBE,AIbX,ER8BalC,ADAAA,CS9BCD,GR8BE,ADAA,AMbC,ACDA,CDCClB,ACDAX,EEhBlB,AR8BmB,ADAA,AOdb,CNcF,ADAA,ECAkB8B,ADAAA,AMbL,CEFO,CAACR,AFEA0C,ACDArD,ENcA,ADAA,GCAGA,ADAAA,AOdE,CAACiD,GCDzB,CPe2B,ADAA,CCAC7B,ADAAA,AMbjB,CAAf,ACDA,EAAqC,ENcnC,ADAA,ECAqCD,ADAAA,ICAG,ADAA,ECAxC,ADAA,ECA4C,ADAA;AKhB1CiE,AGED,AJOD,AKtBJ,AR8BM,AClBJnE,AFkBI,AMbL,ACDG,ILJFA,GOZGZ,APYA,CGCC+E,EDSET,EHQE,ADAA,CCAC1D,ADAAA,CKjBC,CAACuC,EJiBC,ADAA,GCAGrC,ADAAA,EIRG,EHQV,ADAA,CIRasD,CKtBvB,ER8BwBnD,ADAAA,CKjBG,AIbA,CJaCpB,CIb5B,CR8B4B,ADAA,CCACmB,ADAAA,MKjBF,AJiBH,ADAA,CKjBZ,CJiBF,ADAA,CKjB8BmC,EJiBA,ADAA,EIRI,AHQtC,ADAA,CIRuC5C,CHQD,ADAA,KIRxC,EAAiD,CCTC,CAACV,SAAS,GAAG,CAAb,CAA1C,CAAN;AACD,AGEF,AJOGF,AKtBN,AR8BQ,AClBNmB,AFkBM,AMbT,AHHD,AIEK,CD/BL,EAkCA,CJPIA,GOZG4G,APYA,CEUC/H,CDRC0D,ICQI,CAAC7C,AHQEJ,ADAAA,KS9Bd,ENcF,CMdsB,ANcApB,CFgBE,ADAA,CGhBxB,EFgB2BW,ADAAA,AGhBDA,CCQlB,AKtBN,IR8B8B,ADAA,AGhBhC,CFgBiCkC,ADAAA,CGhBAlB,IAAjC,EFgB2B,ADAA,AGhBY,WFgBKC,ADAAA,ICAjB,ADAA,cCAwBE,ADAAA,ICAxB,ADAA,ECAjB,ADAA;AIPF,AKtBN,APYC,ACED,MAAI4C,CMdC9D,KAAL,KNce,GAAGZ,EAAE,CAACiB,KAAH,KAAlB;AEDIoE,AGGF,AJOG,AKtBL,AR6BQ,ACjBT,AFiBS,AGfR,AIEE,CLtCJ,KGkCMA,AFEAzD,CMdC+G,CDeCxI,ADCAwB,CJFC,EMdP,CNcUgD,AIEA,CFJC,CAAC9D,AJiBA,ADAA,CCACY,ADAAA,KQdX,ALDgB,CAACiD,CKCC,CHHC,GAAG,CAAb,AJiBc,ADAA,CKjBrB,AJiBsBrC,ADAAA,AObxB,EAA0B,EJFE,CAAC,CAAD,CAAZ,CFeL,ADAA,AGfb,CFemCjB,ADAAA,SCAQ,ADAA,CCACnB,ADAAA,MCA/B,ADAA,CCAL,ADAA,ECA6C,ADAA;AKhBlD,AGGC,ACfJ,AR6BU,ADAA,AMXZ,AHJE,AIEImG,IDEAD,CDlCQ,CF8BRrE,AIEAsE,CFJCxF,AIZA+C,ENcE,CKCC+B,EH/BI,AIgBZ,ANcUf,CE9BR,ECkCa,CLYH/C,ADAAA,EMZM,ELYH,ADAA,AGhBG,CAAC8C,AIEA,CAAC/D,GNcAyC,ADAAA,EMZhB+C,ACFe,ECDQ,ADCAnC,GCDG9B,ALDA,CAAC,CAAD,CFgBlB,ADAA,AGhBM,CAAlB,EGIkB,CLaNJ,ADAAA,AMbOnB,CEHmB,ADCnB,CCDoBwB,CDCCR,CNezB,ADAA,CMbG,EAAQuE,ACFP,CAAf,CNegB7C,ADAAA,OQhBU,CAAwBlD,IPe1C,ADAA,AMZM,EAA2B,ELcjC2B,ADAAA,IQjBsD,APiBnD,ADAA,CQjBoD9B,EAArC,CAA1B,APiBeyC,ADAAA,KCAK,ADAA,GCAG,ADAA,CCFf,ADAA,ICGAX,ADAAA,ICAG,ADAA,ICAIY,ADAAA,KCAK,ADAA,GCAG,ADAA,CCJjB,ADAA,ECKE,ADAA;AKrBX,AGGGgD,AJMAL,AKrBJ,ARkCY,ADAA,AMhBZ,AHJA,AIEG,GFlCH,EEgCE,CCCEK,AJMAL,AEHAgB,AHJAzB,CMdChB,IFgBI,EHKE,AKrBX,CLqBY0B,CFTC7B,ACEA,AIEA9B,GNkBKZ,ADAAA,AGpBF,CIEC,CDEjB,AHJA,KKCuB,CAACO,AJMA,GAAG,CAAhB,AHakB,ADAA,CIbzB,EHa4BY,ADAAA,COlBvB,CCDL,CDC8B,ECA5B/B,GPkBkC,ADAA,CCACgC,ADAAA,QQlBvB,CAACjC,KPkBa,ADAA,CQlB1B,KAAwB,EAAxB,GPkBqD0B,ADAAA,ICA3B,ADAA,cCAkCE,ADAAA,ICAlC,ADAA,ECApB,ADAA,8BQnBR;AAID,AJGA,AKrBH,AHkBA,AHJA,AIEIsE,KCJF,AJXU,CEiBRE,AHJAzB,AIEAuB,CHKC,AKrBA/E,ELCO,CAAV,CIiBO,AFAT,SGlBA,CFgBmB,CAACV,CEhBC,ANcrB,EMdA,EFgBmB,EAAQqD,WAAR,EAAqBrC,IAArB,CAAf;AFHJ,AGMI,AJGH,AKrBD,ARiCYhB,ADAAA,AOjBT,GHpBH,GCgBMoF,CIZD5B,GDkBGwB,EHNI,EJqBAhF,ADAAA,CKrBG,EGMA,EPeE,ADAA,CQfCuB,APeAlB,ADAAA,CSjClB,GJYM+E,AIZgB,EAAtB,EDkB0B,CAAC5D,CHNZ,CAAC6B,QJqBJ,ADAA,CCA0BlB,ADAAA,EKrBvB,CGMG,CHNW3C,AGMaQ,APe9B,ADAA,CCA+BI,ADAAA,IQfI,CAAC4C,KAA9B,CHNH,AGMX,CPeQ,ADAA,CKrBkC;AAC5C,AGMEgC,AClBJ,ARiCYvE,ADAAA,AMfZ,AHLA,AIGC,MCEGuE,ALLAhF,CMbCiI,AHkBA,CDNCnD,GCMG5E,AHLA,CAACQ,CKKC,CAACC,APeAF,ADAAA,MMfM,GEAd,APegB,ADAA,AMfC,CLeAnB,ADAAA,AMfrB,CHLI,CEDoB,ACMAY,AHLAe,CMbxB,EJY2BM,AFCA,CMbC,ARiChB,ADAA,ESjCZ,ANa8B,CAA1B,EGK6B,EDNE,CAACC,ACMA+D,AHLAvF,KAAK,CAACU,QEDf,ACMuB,CDNC2C,ACMAzC,IHLf,CAAoBK,CGKxD,EAA2Df,AHLA,GEDG,AFCA,CEDCb,AFC3B,EEDT,AFCsC8B,CED/D,ECMkE,AHLhC,CAApC,CGKA,CHLuE,CGKC;ADLtE,AGMC,AJGH,AKrBA,ARiCW,ADAA,AMfT,AHLA+C,AIGH,CAvCD,EAyCA,CJLIA,GMbGgE,CJYG7C,ACOJ,CAACK,EFEId,UDRU,CEDG,CCOlB,CGnBJ,CJYyB,ECQrBc,EFCJ,CAA4BrC,IDRH,CAACpC,GAAG,GCQ7B,AEDkB,AHPc,CGObrB,AHPM,CCQgBJ,CDRN2E,QAAV,EAAN,CCQnB,AEDI,EFCmDU,CEAjD7E,KAAK,CAACkC,CFAZ,EAAiE,CDRhBf,GGQ3C,AHR8C,CGQhCoE,AHRiCpB,QAAJ,EAA9B,CAAjB,GGQgC,CAACjE,MDTjC,GCSgC,CAA5B,EAAyCN,aAH7C,EAIE;AEHH,AJGC,AKrBF,ARiCS,ADAA,AMXL8F,GE9BJ,GF8BIA,CGtBCyC,CLqBC9E,QKrBN,GLqBiB,AKrBA,CLqBChE,AECA,EFDZ,CECeW,CGtBrB,GLqByBA,CECC,CAACkC,GFDG,CAACc,GECV,CAAcuC,CFDjC,EAAoC,WECW,CAACrF,SAAD,CAA5B,CAAjB;ADLF,ADKE,AKrBJ,ARiCO,ADAA,AMXHyF,AHVF,MGUEA,CGtBCyC,CJgBC,AFJApI,CEICqF,CDMDhC,CEAG,EHVE,CMZX,AHsBYnD,AHVAgC,GMZG,ILsBE,ADVX,CCUY7C,AKtBlB,ANYoB6E,CEIC,ACMjB,CDNkBxC,ADMhB,KAAmB1B,GCNlB,CAAwB8E,CDMD,CAAC7B,IDVzB,ECUA,ADViC3D,ICWhC+D,EDXD,IEI2C,CAAC1C,IDOhC,CAACtB,CDXjB,CCWK,CDXmD,CEInD,CAAL,EAA4D,ADOpCW,KAAK,CAACiD,MAAzB,IAAmC4B,QAFtC,EAGE;ACPFC,AGEJ,AJMM,AKxBN,ARiCK,ADAA,AMXF,AHVC,AIKN,IAAMU,CDFF,CDCEV,AGEAtB,CClBC6E,GNYGrH,CGUC,CFEC8D,EDZE,CGWRY,ACNW,GAAG,CJLD,CKMC,GClBlB,CJgBsB,CAAC/E,CIhBC,CFiBpB6E,EDMc,CFCU,AEDT5F,CGvBnB,ELwB+B2B,ADZ3B,CEIA,CFJ6B,EEK3B8B,CEAY,CAACrD,EHOoB,CINdA,AJMewB,CEDpC,CCNc,EAAQ+D,CCCI,CHDb,AGCc/B,AFM3BxD,CDPcT,ICOT,CAAC2C,CDPJ,CDOyB,CAAwBmB,GCP1B,AEAX,CDOd,CDPE,AGCY,AFMAkC,ACP2B,CCC7C,KJMkE,CAAClG,EAApC,CAAzB,IEA0B,CAACa,SAAD,CAA5B,EAAyCN,IDRzC,SCMK,EAGL;ADPD,AIjBH,ARiCG,ADAA,AMRC,AHbEqE,AIKN,MAAIyB,CEjBCnB,CNYCN,EGcAyB,OHdS,CAACvD,EIKhB,EJLM,AIKcwD,CJLCzB,CGcD,CAACrE,ECTrB,MEjBA,GAAkC,EAAlC,ENYM,EGcA,GACAG,KAAK,CAACkC,OAAN,CAAcqD,cAAc,CAACrF,SAAD,CAA5B,EAAyCL,iBAF3C,EAGE;AEVN,AJMM,AKvBN,AH4BM6F,AHhBD,MKKD6B,CCjBCe,ANUD,CGkBE5C,IFLI1E,CDXC,GCWG,MEKM,CEXpB,EFWuBhB,KAAK,CAACkC,EFLvB,CKvBN,CLuBiC,EKvBE,CH4BZ,CAAcqD,EG5BrC,YH4BmD,CAACrF,SAAD,CAA5B,CAAjB;ADVJ,ADMM4E,AKvBR,ARiCE,ADAA,AMLIa,AHhBA1B,AIIN,OEhBKsE,AFgBA,CFCC/I,AJgBAiD,ADAAA,AMLAkD,AHhBA1B,ECWEa,CGPC5E,EDYE,GAAGA,CHhBC,CFqBC,ADAA,AGrBAkE,EEKd,AEDgB,CNiBC,ADAA,CKhBC,AJgBd,ADAA,COjBe,CAArB,CNiBuBxC,ADAAA,AMLjB,AHhBA,CAAkBsC,AIIAhE,EHOE,CAACS,AKvB3B,CRiCM,ADAA,ESjCwB,CRiCCoB,ADAAA,EOjBE,CEhBjC,ELuBQ,AHU4B,ADAA,AOjBAwD,GNiBGzD,ADAAA,EGrBjC,GFqBJ,ADAA,ECA4C,ADAA,IOjBI,CAAClB,MAAnD,EAA2DV,SAAS,EAApE,EAAwE;AFEpE,AGDJ,AJOO,AKvBP,ARiCI2C,ADAAlB,AMLC,AHhBA,AIIH,MNiBEkB,ADAAlB,CQjBC,AChBA6G,CFiBD,CHIE,AGJD9C,CFAGX,CGDC7E,IJOI,KIPK,ERiBE,CQjBC,ARkBfF,AOjBF,CCDJ,APiBsB,CAChBA,COlBkBE,CDEpBwF,CPegB,CKhBO,CJgBL,ADEhB9D,EKlBwBL,AJkBxBK,GOnB2B,AChBjC,ATiCoB,ECAE,ADGhBa,CQpB8Be,AChBA,CAApC,ARoCMf,CInBgC,CAACjB,AECrB,CAAC9B,KPkBH,ECAA,CDAG,AOlBf,CPegB,CQjB8B,APoB/B,COpBgCkB,APiB7B,ADIhBkB,AOlBA9B,EFFwB,AJoBxB8B,CIpBgDtC,ELgBlC,AOdT,CCHX,ADGY0C,CNcU,ADKhBH,CQtBqD7B,CPsBrD6B,GDLc,COdd,CNcgB,ADMhBC,AOpBcuD,CFF8C,CAAClG,AJsB7D2C,COvB8D,CHCtC,CAA1B,AGDJ,EAAwE,IRiBpD,ECAE,ADOhBC,COrB4B,CNqB5BA,AMrB6B/B,QPcf,CAAhB,AOd8B,CNcZ,AMdhB,CNcF,CMd2CR,QAH7C,EAIE;ACHF,AJOM,AKvBT,ARyCI,ADAA,AMbA,AHhBA,AIQCgG,EElBN,GR6BI,ADAA,COXEA,ECJExF,GPyBG,ADAA,GIlBGT,GIPG,GDIG,ECJE,CAAlB,AJOmB,AGHAO,ECJEoF,GDIG,CAAClD,ECJE,CAACsB,IDIT,CHGb,AGH2B+B,SCJS,CAACrF,IDII,CAACA,ICJN,CAAf,CAAN,CAArB,EDI+C,CAA5B,CAAjB,CCHGkF,MAAM,CAAC5B,cAAc,CAACtD,SAAD,CAAf,EAA4BsD,cAAc,CAACtD,SAAS,GAAG,CAAb,CAA1C,CAAN;AHAH,AGCH,APwBG2C,ADAAlB,AMbH,AHhBA,AIQGgE,MNqBA9C,ADAAlB,AOrBAgE,IFJI,CAACN,AEIA,GAAGnF,QPqBQ,CACdF,AOtBF,CNqBkB,CIzBC,AJ0BjBA,CI1BkB0B,ELyBJ,ECAE,ADEhBE,ECAAA,EI3BG,CAAwBmD,ALyBb,ECAE,ADGhBtC,ECAAA,QDAU,ECAA,CDAG,CAHC,CCGD,CAHG,ADIhBX,CK7B8C,CAACnB,AJ6B/CmB,GDJc,ECAE,ADKhBC,ECAAA,EI9BG,CAAL,ALyBgB,EKzB6C,AJyB3C,YDOhBE,ICAAA,MDPc,CAAhB,GCAkB,CAAlB;AIxBE8C,ADME,AH2BL,ADAA,AO7BA,QFJGA,MDMM1B,WAAW,CAAC5D,CCNC,CAACkB,ODMH,CAAX,CCNN,GACEnB,KDKA,EAAqC,KCLzB,CAACD,MAAb,KAAwB,EAAxB,+BADF;AAED,AGDLS,AJMU8E,AKrBZgD,AH0BEvC,AHhBA,AISC,ECJDvF,AFWAuF,GG1BG,CAACkD,ANUAzI,CKKC,CAACwD,GLLG,CCWCsB,ADXApE,GMVZ,CAAgBgI,AH0BA,CAAC9C,KEXf,CFWA,CAAsBD,CEXC,ALLnB,CMVN,ANU0B1E,CKKxB,ECf2B,AH0B3B,AHhBI,CCWwB,CAACN,AEKA,AHhBAQ,CGgB7B,EHhBgC,GAAG,CAA/B,CAAJ,CCWU,CKrB6B,ANUA;AEOpC,ADKM,AKrBT,AR+CE,ADAA,AMrBF,AHhBE+C,IAAAA,GMVGyE,CR+CC9G,ADAAA,CMrBC6D,EFPC,EH4BG,ADAA,II1BI,AH0BAjD,ADAAA,II1BIY,ADXA,EGgBnB,CG1BA,GR+CyB,ADAA,GCAG,ADAA,CCAjB,ADAA,CI1BmB,AH0BxB,ADAA,CI1ByB5D,CDXNwB,CFqCQc,ADAAA,EGrCL,CAACoC,EFqCS,ADAA,EI1BR,CAAX,AH0BsBrC,ADAAA,GGrChB,EFqCvB,ADAA,AGrCiB,EFqC6B,ADAA,II1BjC,EAAuC,MDXX,CAACX,GAAG,GAAG,CAAP,EAAUgD,QAAV,EAAxB,CAAjB;AEOD,AGFD,AJOUW,AKrBV,AR+CIjC,ADAAlB,AMrBL,ACRC4D,CDnBF,CCmBEA,CFtBA,ACgCF,GEdML,APiCArC,ADAAlB,CS/CCiH,KLqBK9D,CIPV,EAAa,CDIC,CElBd,AFkBec,KP6BK,CACd5F,AO9BN,CN6BsB,AM7BA2F,CN8BhB3F,GDDc,CO7BpB,CHG4B,AH0BN,ADEhByC,CI5BuB9B,AGHA,CN+BvB8B,AM/BN,QHGU,AJ4BM,ECAA,CDAG,CAFC,CCED,CAFG,ADGhBZ,ECAAA,GDHc,ECAE,ADIhBC,ECAAA,GDJc,ECAE,ADKhBC,ECAAA,GDLc,ECAE,EAMhBC,UDCAC,CCPgB,EAOhBA,ODPc,CAAhB,ECAkB,CAAlB;AOhCF,AJOO,AKrBT,ARuDG,ADAA,AG9CD,AISF,KN2BE,ADAA,ES7CG4G,CNSC7I,CISC0F,EHCQ,AHoCN,ADAA,EG9CE,CAACxD,GCYG,IAAImB,ADZb,CAAca,CISpB,CElBA,QLqB8B,CAACzE,MDZzB,EAAiCH,CCYT,CAAX,IDZb,CKKYU,KAAhB,EJOa,EAAwC,CDZrD,EAAwD;AEQ1D0E,AGFE6C,AJOQzC,AKrBV,ARuDIjC,ADAAlB,AG9CA,AISL,CAdD,CFYE+C,CEIF,CCNI6C,EPyCE1E,ADAAlB,CSvDCmH,EJgBE,CAAC,AFPA9H,CEOD,CAAP,ADKU8D,EDZE,KMTZ,EDcmB,CRyCC,CACd9E,CQ1CgBA,APyCA,CAChBA,GDDc,CQzCO,CAACuE,AJOA,AHkCN,ADEhB9B,CIpCuB9B,CHoCvB8B,CEhDF,EAA6B,KCYvB,AJoCM,ECAA,CDAG,CAFC,CCED,CAFG,ADGhBZ,ECAAA,GDHc,ECAE,ADIhBC,ECAAA,CO7CJ,ERyCkB,ECAE,ADKhBC,ECAAA,GDLc,ECAE,YDOhBE,ECAAA,QDPc,CAAhB,CCAkB,CAAlB;AItCL,AGFE,AJOQ,AKrBT,AR+DG,ADAA,AMpCL,AHlBQgC,CErDR,EGuDE,CFgBI4B,GG3BCkD,CNSC9E,CKKC,EJKQ,MAEA,ADZA,CAAC9B,GCYGkB,AEME,CG3BrB,ANSM,CAAea,CGkBG,QFNM,CAACzE,AEM3BoG,OHlBE,ECYwB,CAAX,OEMK,CAACC,GFNV,EAAuC,IEM9B,EAAYC,UAAZ,EAA2B;AEZjD/F,AJOQ8E,AKrBX,AR+DE,ADAA,AMpCD,AHlBK,CMfP,EAQA,ARhBE,ADAA,CQ4BE9E,EFaIgG,CHpBF,EKOG,APiDA,ADAA,CQjDCb,EJOEL,CDZC,EKKT,WFawB,GAAGgB,CFND,CAACnF,OEMS,CAACtB,CFN7B,CEMmB,CAC1BiB,KAD0B,MAE1B2F,GAF0B,CAEtB,UAACC,UAAD;AEdL,AJOO,AH0CP,ADAA,AMnCK,AHnBDjC,AIUR,IAAMwB,IN4CEpD,ADAAA,AGtDA4B,GCUS,AESQD,IDZViB,EDKE,ADZA,CAACb,CGmBe,ACTZ,CDSa8B,CLmCd,ADAA,CO5CI,EN4CD,ADAA,CGtDf,CFsDJ,ADAA,AGtDsBhC,IGmBO,CAAxB,ACTHuB,YJVE,GIUgB,CAACzF,KAAD,EAAQqD,WAAR,EAAqBrC,IAArB,EAA8B;ACJnD,AJOS8D,AEMH,AHlBF,AIUL,GDM6B,CAA7B,ECNI6B,MHEM7B,IGFI,GAAGpB,WHEW,CAAC/C,AGFA,CAAC0C,QHEpB,GGF+B,CAAChE,EAAb,EAAiBW,KAAjB,CAA7B;AHGS,AKpBX8H,AR6DI,ADAA,AMnCF,AHlBG,KMRA,CAACW,AH0BEtC,GLmCC,ADAA,ICAIjG,ADAAA,ES7Db,CAAgB0I,QR6DM,ADAA,ES7DtB,CR6DyB9G,ADAAA,AMnCI,EG1BA,CH0BGiE,ELmC5B,ADAA,ECA4B7F,ADAAA,MMnCU,CG1BD,AH0BEb,EAAX,CAC3BiB,CLkCoC,ADAA,ICAIyB,ADAAA,AMnCb,KLmC5B,ADAA,CMjCCkE,CLiC+C/F,ADAAA,EMnCpB,CAEvB,QLiCoD,ADAA,EMjCnDgG,ELiCuD,ADAA,CCA7D,ADAA,ECAgE,ADAA,KMjC3D;AEdP,AJOO,AKpBP,AR6DI7D,ADAAA,AMlCG,AHnBN,AIOmD,MCFhD9B,ACbAyI,AR6DA3G,ADAAA,CQhDJ,IFcuB2B,KG3BT,GR6DE,ADAA,AMlCe,CLkCd7B,ADAAA,AMlCe+D,CG3BhC,GR6DI,ADAA,CCAkBhG,ADAAA,KMlCS,CAAxB,KLkCH,ADAA,SO5CkByG,UAF8B;AHM/C,AHyCF,ADAA,AMnCI,ACZ6C,GDUtB,CAA9B;AEXA,AJQG,AKrBH,AH2BA,AHnBA,MGmBMP,AHnBFpG,CKKCO,ACbA,CDaC,AFcE,GEdC,ACbAU,AH2BE+E,AHnBF,CKKT,ALLUtF,EKKEH,ACbA,CDaC,ECbE,CDaCgH,ACbhB,EAAkBtG,GAAG,ENQjB,CMRoB,ANQAA,GAAG,EMREC,AH2BE,CAAC,AHnBF,CGmBC,AHnB3B,CGmBJ,CEdiC,CAACN,CCblC,CNQoCZ,CMRCiB,GDarC,ACbwC,CNQC,CKKCV,ACb1C,ANQ0CG,CKKC,CCbC,CDa5C,EAA+C,QLLX,CAAoBO,GAAG,GAAG,CAA1B,EAA6BE,GAA7B,CAApC,EAAuE;AKMrE,ACbA,AR8DA,ADAA,AMnCF,AHnBE+C,AIKkD,IJLlDA,EGmBImC,EEdA9F,ACbA0I,AR8DA7G,ADAAA,AMnCE,CEdD,EFcI4D,GEdC,CAAV,ACbW,EDaEpB,IPiDG,ADAA,AGtDC,GFsDE,ADAA,ECAnB,ADAA,KMnC6B,CAAC,CAAD,CAA/B,AHnByB,CKKQ,ALLP3D,CKKQsG,ELLL,GAAG,CAAP,CMRQtG,CNQEkD,EMRtB,MNQY,CKK0B,CAAC5D,ACblD,ANQiB,CKKgC,CAAlB,CAAlB,CAAb,KACKqE,KLN0CzD,GAAG,CAACgD,QAAJ,CKMxB,CAACoD,ALNP,CAAjB,gBKMyC,CAAChH,CAAD,CAAlB,EAAuBgH,iBAAiB,CAAChH,CAAC,GAAG,CAAL,CAAxC,CAAlB;AACN,AJMC,AKpBA,AH2BF,ACbA,MDaM+F,EFPA9G,AKpBE0J,AH2BA,GAAG/C,SFPT,EAAkB,EKpBI,GAAG,EAAzB,GH2B8B,CAAC,CAAD,CAAhC,qBCbkC;AHO9B,AHyCF,ADAA,AMlCF,AHpBE,AIMgC,MDc5BI,EAAE,AHpBFvG,CFsDC,ADAA,CIzCCR,AGPCsE,CDcEqC,ELkCAjG,ADAAA,AGtDA,CAACgC,KIMsB,EJN5B,CCac,ADbAgC,CCaC7E,CHyCD,ADAA,CIzCZ,EHyCeuC,ADAAA,GIzCK5B,EHyCA,ADAA,AMlCI,CAAC,CAAD,CFPC,AHyCF,ADAA,AMlC/B,CFPkCiD,AHyChC,ADAA,ECAgC/C,ADAAA,CGtD5B,EAAiCZ,CCa/B,IAAoCE,CDbtC,EFsDqC,ADAA,ICAIqC,ADAAA,KIzCS,AHyCJ,ADAA,AGtDlD,CCauDxC,CDbC,CCad,AHyCW,ADAA,CCArD,ADAA,ECAwDa,ADAAA,EIzCMF,KAAK,CAACgD,GHyCH,ADAA,EIzC/D,EAAyE,AHyCN,ADAA,CCArE,ADAA,ECAwE,ADAA;AQ/C1EhD,AJOM,AKrBJ,AR8DEoC,ADAAA,AMlCJ,AHpBI,EKMJpC,IPgDIoC,ADAAA,AMlCEoE,CEdD,CAACrB,CCdC,CNQCd,ECaEU,AEOE,CEdZ,ACdW5D,CNQC,CGoBGG,CG5BD,GAAG,AR8DD,ADAA,AMlCG,CG5BjB,AR8Dea,ADAAA,AMlCGsE,EG5BAtF,CH4BL,CLkCX,ADAA,AMlCoBiF,CG5BD,AR8DDlG,ADAAA,CMlCI,EG5BA,CH4BGoG,EFPA,AEOd,CAAf,CG5B+BlF,ANQ3B,CCa4BG,CDbC,CFsD7B,ADAA,ES9DF,EAAoCJ,ELqBE,CAACK,AKrBA,EAAvC,EAA2C,ULqBb,CAAwBhC,YAAY,CAACH,EAArC,CAA1B;AINNuF,AJOMG,AKrBF,AR8DD,ADAA,AMlCH,AHpBMd,AIKJ,ECCFW,IFcM8B,EFPA3B,ADbAd,EMRI5E,AFaJW,EEbM,AH4BA,GAAGsB,ACfJ,CAAC2B,CJLG,CAACd,CGoBG,CEdD,AFcEsE,CEdDzG,CLNb,AIKA,CDeS,AHpBMkE,AIKFtD,CDeKyF,CG5BNpF,CDcM,AFcE,CEdDiB,AJOA,CAACvB,AKrBd,CH4BiB4F,ACfvB,EDeS,CAAf,EEdmB,ADDW,CCCGvG,ADD/B,EHQI,AGR2B,GCCK,AJQ9BR,ADdF,CKMiCyD,CCdd9B,GAAb,CAAR,CDce,CAAD,EAA8BoG,EJQ5B,CAAChI,MAAb,KAAwB,EAAxB,CIRyD,CAACgB,CAAC,GAAG,CAAL,CAA/C,CAAlB,kCJOM;AINNP,AJQK,AKtBD,AH6BJ,AHrBK,AIKD4G,ECCJ5G,KAAK,ALRD,CKQEuE,ADDFqC,CDgBGJ,CG7BC2C,GNQG,EGqBE,GAAGzC,AChBF,CACRrD,CEdY,IH6BlB,KG7BI,CFaU,EAERrD,ECDN,GAAmC,ADCxB,CAACkC,CCDZ,MDCM,CAAc4B,SAAd,CAFQ,EAGR9D,KAAK,CAACkC,OAAN,CAAclC,KAAK,CAACiD,MAApB,CAHQ,EAIRjC,IAJQ,CAAV;ACEL,AJQI,AHwCD,ADAA,AMjCH,AHrBOiD,AIUH,CC3EL,AFuEA,EAiBA,EFfI,EGLA,CNmDIzB,ADAAA,AGtDAyB,GCcG,EGJA,IN4CK,ADAA,AGtDC,CAACG,EFsDC9C,ADAAA,ICAI,ADAA,CCACiB,ADAAA,AGtDhB,CAAkB2B,IFsDP,ADAA,CCAW5C,ADAAA,ICAI,ADAA,CCACD,ADAAA,MCAL,ADAA,CGtDtB,IFsDsCgB,ADAAA,aCAY,ADAA,CCACzB,ADAAA,MCAxC,ADAA,CCAf,ADAA;AIvCE,AKvBA,ANSC,AIUDgG,QAAAA,EHII5B,AKtBF/D,GAAG,ILsBM,CKtBDK,AFkBA,CAAC+B,CHIG9B,EKtBA,CAACgB,KLsBO,AKtBZ,CLsBaf,AKtBF,CFkBX,EAAcxB,EElBEkB,GFkBG,CAACgB,EElBT,GLsBP,AKtBqB,CLsBGlC,AKtB5B,CAAR,AFkBsB,CAAc8D,GHIK,AKrBzC3C,CLqB0C6B,EKrBvC,GLqBS,AGJU,CHIxB,AGJU,CEjBA1B,CFiBwCN,GEjBpC,CAACuB,AFiBL,CAAV,IEjBU,CAAW,KAAKnB,KAAL,GAAa,CAAxB,CADR,IAEA,KAAK4B,KAAL,CAAWpC,MAAX,KAAsB,CAHxB,EAIE;ALoBFoE,AKnBEmE,AR0DJ,ADAA,AGrDC,AIUA,MHICnE,EKnBEmE,AR0DA7G,ADAAA,KIvCK,CAAC3B,CIRC2G,EP+CC,ADAA,CS1DE,ER0DChG,ADAAA,GIvCb,CHuCiB,ADAA,CCACiB,ADAAA,GS1DhB,ER0DW,ADAA,CCAWjB,ADAAA,ICAI,ADAA,CCACD,ADAAA,MCAL,ADAA,KCAgBe,ADAAA,aCAY,ADAA,CCACxB,ADAAA,MCAxC,ADAA,CCAf,ADAA;AItCC,AKnBG,AH2BR,AHtBG,AIUA,IDYG8C,SG3BOV,GH2BK,EG3BV,CH2Ba,SAAfU,GG3BkBrE,EAAhB,OH2Ba,CAACA,EAAD,EAAKW,KAAL,EAAe;AFPjC,AKnBI,ARyDH,ADAA,AM9BF,AC1BoD,MD0BhD+D,CGlCA,CRgEEpB,ADAAA,KSzDK,IACL1B,AH0BS,CL8BC,ADAA,ESxDP,AH0BS5B,CL8BCgD,ADAAA,CM9BC,CAAC/B,EG1BPgB,GH0BI,CG1BA,CAACiB,GH0BnB,CL8B+B,ADAA,CSxDjB,ARwDkBC,ADAAA,CSxDP,KAAKtB,GRwDC,ADAA,CCA7B,ADAA,ESxDuB,GAAc,CAAzB,CAAR,IACAC,GAAG,KAAKG,IAAI,CAACiB,KAAL,CAAY,IAAI,KAAKnB,KAAV,GAAmB,CAA9B,CADR,IAEA,KAAK6B,MAAL,CAAYrC,MAAZ,KAAuB,CAHlB,EAIL;AACAuI,ARqDJ,ADAA,AM9BF,AHvBA,AIJoD,MD2BhDlI,AHvBAjB,EMAEmJ,ARqDAvG,ADAAA,CM9BC,EHvBE,CGuBCoB,AHvBAtD,KFqDK,ADAA,CSrDC,ERqDE2B,ADAAA,AM9BA,CAAC0B,IHvBf,CAAoB9C,GMAlB,ANAF,EAAyBE,CGuBC,CL8BA,ADAA,AM9BC,CL8BAmB,ADAAA,AM9BD,AHvBE,CGuBd,CAAlB,CHvBmC,CAA/B,CAAJ,EAAuC,EFqDT,ADAA,CCA5B,ADAA;AItCFoC,AKdM,AHuBN,AHvBER,AILkD,EHmBpDQ,EDdER,EGuBE/C,GFTG,AESA,CFTC,CAAD,CAAP,AESU6C,CGvBCf,MAAL,CHuBY,CAACc,AHvBA,WMAI1E,AHuBO,CAAC,CGvBzB,AHuBwB,AHvBL4B,CGuBP,CAAlB,CHvB4B,CAACkD,QAAJ,EAAN,cAAwB,CAAChD,GAAG,GAAG,CAAP,EAAUgD,QAAV,EAAxB,CAAjB;ACeH,AKdM,ARoDH,ADAA,AM7BF,AC7BoD,CHrDtD,KEkFQF,CG9BK,ER2DJ,ADAA,ISpDI,ARoDAhD,ADAAA,EM7BI,GL6BD,ADAA,AM7BI,EAAlB,CL6BiB,ADAA,CCAf,ADAA,ECAkBA,ADAAA,KCAG,ADAA,GCAGjB,ADAAA,KCAK,ADAA,CCACkB,ADAAA,MCA9B,ADAA,ECAsCD,ADAAA,KCAG,ADAA,ECAzC,ADAA,ECA6C,ADAA;ASnDzCkI,ARoDF,ADAA,AM7BJ,AHxBE,AINkD,MD8BhDjF,EGvBEiF,ANDAnJ,GFqDG,ADAA,EGrDE,CAACkC,CFqDCf,ADAAA,GSpDG,ERoDA,ADAA,CGrDV,CAAc+C,CFqDD,ADAA,AM7BnB,CL6BI,ADAA,ECAkB/C,ADAAA,KCAG,ADAA,CSpDnB,ERoDsBnB,ADAAA,KCAK,ADAA,AGrD3B,CFqD4BoB,ADAAA,CGrDK9B,IFqDnC,ADAA,ECAqC6B,ADAAA,AGrDnC,KFqDsC,ADAA,ECAxC,ADAA,ECA4C,ADAA,EGrD9C,EAAwD;AMErD,ARoDC,ADAA,AGrDF,AIOL,CAdD,SJOUkD,EFsDA,ADAA,CCACpD,ADAAA,CGtDG,IFsDA,ADAA,GCAIE,ADAAA,KCAG,ADAA,GCAG,ADAA,ECAd,ADAA,EGtDJ,EFsDyBG,ADAAA,AGtDI,IFsDA,ADAA,CCACD,ADAAA,MCAL,ADAA,ECArB,ADAA,GCAqC,ADAA,ECArC,ADAA,ICCA,ADAA,CCAEJ,ADAAA,KCAG,ADAA,GCAG,ADAA,ECAP,ADAA,GCAaE,ADAAA,KCAd,ADAA,ICAqBG,ADAAA,ICAI,ADAA,CCACD,ADAAA,MCAL,ADAA,ECArB,ADAA,GCAqC,ADAA,ECFvC,ADAA,ECGE,ADAA;ACCA,ADAA,AMhCR,AHxBM4C,MGwBFjE,EHxBEiE,GGwBG,CAACvD,ELgCID,ADAAA,GGxDC,CAAC0B,IAAV,CAAe+B,CFwDC,ADAA,CMhClB,CAAoBjD,CLgCCjB,ADAAA,EMhCE,GLgCG,ADAA,AMhCA,CLgCCkC,ADAAA,AMhC3B,KAAgClC,ELgCX,ADAA,AGxDnB,GGwBmC,CAACU,OLgCAO,ADAAA,KCAjB,ADAA,CMhCW,CAAoBA,GAAG,GAAG,CAA1B,EAA6BE,GLgChBA,ADAAA,AMhCb,CAApC,EAAuE,ELgC9C,ADAA,ECAjB,ADAA;ASvDJ,AHwBF+C,AHxBG,AIOP,IDiBIA,GH1BE,EISG0C,CEPGwC,GNAC,IMAM,EFOnB,CEPsB,AFOF/F,CDiBC,GGxBKjE,OFO1B,EAAiCyH,CDiBN,CAAC5F,EGxBN,CAAS5B,AHwBA,EGxBT,CHwBY,CGxBC8J,AHwBR,CCjB3B,CDiBqChF,CCjBQ2C,OEPvB,AHwBK,CGxBrB,CHwBe,OCjBrB,EAA+D9F,IAA/D,CDiBmDG,CCjBkB,EDiBf,CAACgD,QAAJ,EAA9B,CAAjB;AGvBE+E,ARuDI,ADAA,AM/BN,AHxBIjF,AION,MEPIiF,AFOAxJ,EDiBEM,AHxBAiE,KGwBK,CL+BC,ADAA,AM/BA/B,ACjBA,CNgDCpB,ADAAA,EGvDE,AIOAiG,CJPC3C,GGwBV,CGxBc,AHwBAF,CGxBC/B,ENAf,CAAkB+B,CMApB,ARuDqB,ADAA,CSvDCkF,ARuDA1H,ADAAA,AOhDA,CAAC2B,MEPvB,CRuDS,ADAA,CCAsB5C,ADAAA,EM/B7B,CCjBoB,CDiBanB,CCjBCuH,CJPlC,IFuDqC,ADAA,AM/BrC,CL+BsCvH,ADAAA,IOhDlB,CAA1B,CNgDa,ADAA,CCAL,ADAA,ECA6C,ADAA,CM/BnD,EACE2E,SAAS,CAAC9B,IAAV,CAAe+B,iBAAf;AGxBA+E,ARuDM,ADAA,AM9BT,AHzBI,AIOL,MEPIA,AFOAjC,OEPO,GRwDC7F,ADAAA,KCAG,ADAA,EOjDf,GNiDoBwB,ADAAA,USxDMtD,ARwDd,ADAA,ESxDD,ERyDC4B,ADAAA,KCAG,ADAA,KCAK2B,ADAAA,SCDR,ADAA,GSxD4BuG,CR0D5BlI,ADAAA,KCAG,ADAA,IS1DJ,AR0DQW,ADAAA,KCAK,ADAA,GCAG,ADAA,CCFf,ADAA,ISxDR,AR2DQX,ADAAA,KCAG,ADAA,ICAIY,ADAAA,KCAK,ADAA,GCAG,ADAA,CCJjB,ADAA,ECKE,ADAA;AS3DT,AR4DS,ADAA,AG5DT,kBF4DezB,ADAAA,aCAW,ADAA,GCAGmB,ADAAA,QCAQ,ADAA,CCACC,ADAAA,cCAT,ADAA,WCA2BP,ADAAA,KCA3B,ADAA,cCAkCE,ADAAA,KCAlC,ADAA,ECApB,ADAA;AMlCZ,AHzBC,AIMD,MDmBInB,ACnBA8G,KDmBK,CAACpG,UCnBU,GDmBhB,CAAoBO,ACnBAD,GDmBG,CCnBC,EDmBE,CAA1B,KAAgChB,KAAK,CAACU,ECnB1C,EAA8C,SDmBV,CAAoBO,GAAG,GAAG,CAA1B,EAA6BE,GAA7B,CAApC,EAAuE;AGzBrE6H,AR4DUhJ,ADAAA,AMlCVkE,ACnBA8C,IEPAgC,AH0BA9E,ACnBA8C,UEPU,AR4DAhH,ADAAA,KCAK,ADAA,CCACK,ADAAA,CMlCC,ACnBA,GACfwG,IEReoC,MH0BM,AClBX,CERF,AH0BchI,AClBX1B,GDkBc,CLkCjB,ADAA,CCA0B4C,ADAAA,CMlCN,AClB5B,CDkBqB,ELkCb,ADAA,AMlCuBgC,ACjB/BzE,CETF,AR4DyCU,ADAAA,OMlClB,ACjBb,CAAC,CDiBM,ACjBP,CADR,GNoDQ,ADAA,AOlDRyF,UDgB6C1E,GAAG,CAACgD,GChBhC,CAAC0C,IDgB2B,EAA9B,CAAjB,GChBmB,EAAaC,gBAAb,CAHnB;AENA,AR4DUrG,ADAAA,AMlCV,AH1BF,AIUC,GALD,KDqBMT,CG1BCU,ANAAuD,AIUA,IDgBI,CLkCCxD,ADAAA,AMlCAyB,IH1BZ,GG0BM,CG1BJ,AH0BkBgC,CG1BC/B,CR4DD,ADAA,CCAC7C,ADAAA,ES5DnB,CAAwB4J,GR4Dd,ADAA,QMlCN,EAAiC5J,GG1BrC,GH0BI,WAAJ,EACE2E,SAAS,CAAC9B,IAAV,CAAe+B,iBAAf;AG1BH,AR4DU,ADAA,AMjCV,AH3BF,AIUG8C,IAAAA,iBAAiB,GAAG3D,WAAW,CAAC3D,QAAZ,GAAuBmH,UAAU,CAACtH,MAAlC,GAA2CG,QAAQ,CAAC,CAAD,CAAvE;ANmDO,ADAA,AOlDR;AEVD8H,AR6DO,ADAA,AMjCP,EG5BAA,IH4BIxH,KAAK,CAACU,GG5BG,ANCAqC,CMDCsG,SAAd,AH4BI,CAAoBpI,EG5BE+H,CH4BtB,EAAyB7H,GAAG,GAAG,CG5BnC,AH4BI,CAAJ,EAAuC;AG3BxC,AR6DM,ADAA,AMjCH+C,AClBF,CE3CF,EAmCA,CH0BIA,EClBE8C,eDkBe,EClBE,GAAGH,QDkBC5F,EClBS,CDkBN,AClBOvB,CDkBNyE,OClB7B,CDkByB,CClBoB,CDkB1B,cAAwB,CAAChD,GAAG,GAAG,CAAP,EAAUgD,QAAV,EAAxB,CAAjB;ALkCC,ADAA,AMjCD,AClBA0C,IAAAA,IDkBI7G,KAAK,CAACkC,AClBA,CAACxC,MDkBP,CAAcwE,CClBlB,GAAsB8C,aDkBlB,EAAiC1H,EClBrC,IDkBI,WAAJ,EACE2E,SAAS,CAAC9B,IAAV,CAAe+B,iBAAf;AACH,ACnBC2C,IAAAA,UAAU,CAACrH,YAAX,GAA0B6D,WAAW,CAAChE,EAAtC;AERJyI,AR4DI,ADAA,AOnDAjB,IAAAA,CETC,CAAC4B,ER4DE5G,ADAAA,KCAK,ADAA,COnDC,CETd,AFSe/B,CETC+I,AR4DAjH,ADAAA,GOnDZ,ENmDI,ADAA,COnDclC,ENmDEiD,ADAAA,MOnDM,CAAC,CAAD,CET9B,AFSI,CNmD8B,ADAA,ES5DE,CR4DC,ADAA,CCAb,ADAA,GCAiBb,ADAAA,KCArC,ADAA,ES5D4C,AR4DA,ADAA;AS5DA,AR6D1Ce,ADAAlB,AMhCJ,ACnBEkF,IAAAA,ENmDEhE,ADAAlB,AMhCA3B,KAAK,CAACU,ECnBE,CAACjB,OPmDO,CACdO,CCDgB,AMnDpB,CNoDIA,AKjCF,CAAoBiB,CCnBCvB,CPmDL,CMhChB,CLgCkB,ADEhBkC,CMlCuBT,CLkCvBS,EKlC0B,CNgCZ,AOnDa,CAAC,CNmDZ,ADGhBC,AMnC6B,ACnBF,CDmB7B,ACnBF,CNsDIA,AKnCN,EAAuC,CNgCnB,ECAE,ADIhBC,ECAAA,GDJc,ECAE,ADKhBa,ECAAA,QDAU,ECAA,CDAG,CALC,CCKD,CALG,YDOhBV,ICAAA,MDPc,CAAhB,GCAkB,CAAlB;AASD,ADAA,AMxCDiC,ACnBD,IDmBCA,CL8BA,ADAA,MCUO,ADAA,UMxCU,aAAMjD,GAAG,CAACkD,QAAJ,EAAN,cAAwB,CAAChD,GAAG,GAAG,CAAP,EAAUgD,QAAV,EAAxB,CAAjB;AG7BF,ARsEItB,ADAAlB,AMxCF,ACnBH,EAED,INyDMkB,ADAAlB,CStEC,CH8BC3B,GG9BGiB,EH8BE,CG9BC,AH8BAiB,GG9BG,CAAf,EAAkBjB,CH8BZ,CNwCc,AMxCAiD,CG9BC,ATuEflE,CCDgB,CAChBA,CQvEkB,ETsEJ,ECAE,ADEhB4B,CSxEuBV,CRwEvBU,GDFc,EStEpB,ARsEsB,ADGhBC,ESzE+BZ,ARyE/BY,AK3CA,EAAiCvC,CG9BC,ATsEpB,EStEpB,ARsEsB,ADIhBwC,ES1EsC,AR0EtCA,CK5CA,ENwCc,ECAE,ADKhBa,ECAAA,KK7CJ,EACEsB,CN4CY,ECAA,CDAG,CALC,CCKD,CALG,ADMhBjC,EM7CO,CAACG,IAAV,CAAe+B,GNuCC,EAOdjC,GCAAA,ODPc,CAAhB,CMvCA,CLuCkB,CAAlB;AQtEwC,AR+EzC,ADAA,AM/CF,+BG/BUd,GADiC;AAExC,UAAMmI,aAAa,aAAMrI,GAAN,cAAaE,GAAb,CAAnB;AACA,AR6EF,ADAA,AM/CF,AClBF,IAAMuC,INiEE7B,ADAAA,CM/CCoC,CG9BGa,GR6EC,ADAA,GCAGlD,ADAAA,AOjEE,EDkBhB,CClBmB,ENiEb,ADAA,GCAgBG,ADAAA,IS7EM,AFYxB2B,CNiEuB,ADAA,ES7EInC,ER6EAoB,ADAAA,MS7EQ,CAACnB,AFYrB,CAACnC,ENiEqB,ADAA,AOjEtB,EAAKW,CNiEoB,ADAA,CCAjB,ADAA,CCAzB,ADAA,ECA8C,ADAA,AOjE7B,EAAe,EEZH,CAAwBsJ,aAAxB,CAA3B;AACA,AR6EAzG,ADAAlB,AM/CL,AClBC,CDbF,EAiCA,GL6CMkB,ADAAlB,AOjEAoC,IEZMV,OFYK,GAAGhE,CEZG,CT6ED,AOjEA,CPkEdW,AOlEeM,CEZG,AR6EF,CAChBN,GDDc,AOjEF,CEZU,CAACU,AR6EP,ADEhBkB,ECAAA,CMnEN,EPiEoB,ECAE,ADGhBC,ECAAA,GDHc,CS7EI,CAAmBZ,AR6ErB,ADIhB0B,ECAAA,CQjFkB,EAAwBxB,GAAxB,CAApB,CTiFY,ECAA,CDAG,CAJC,CCID,CAJG,ADKhBY,ECAAA,GDLc,ECAE,cDOhBE,ECAAA,QDPc,CAAhB,CCAkB,CAAlB;AQ3EA6C,ARoFD,ADAA,AOzEH,KN+DE,ADAA,CS1EEA,AFWA7D,GAAG,ENyEE,ADAA,COzEC+C,QAAQ,CAACD,GEXG,CAACwF,OFWO,CAAC,CAAD,CAAZ,CAAlB,KEXI,cAAiD,UAACC,CAAD,EAAO;AACtDA,ARoFF3G,ADAAlB,AOzEJ,MNyEIkB,ADAAlB,AOzEAR,EEXEqI,CAAC,AFWA,CEXCC,EFWEzF,QAAQ,CAACD,CPyEC,CACd/D,CSrFA,ARoFgB,CAChBA,GDDc,ECAE,ADEhB4B,ECAAA,AM3EwB,CAAC,CAAD,CPyEV,AOzEF,CAAlB,CNyEsB,ADGhBC,ECAAA,GDHc,ECAE,ADIhBc,ECAAA,QDAU,ECAA,CDAG,CAJC,CCID,CAJG,ADKhBZ,ECAAA,GDLc,ECAE,ADMhBC,ECAAA,SDNc,ECAE,ADOhBC,ECAAA,QDPc,CAAhB,CCAkB,CAAlB;AASD,ADAA,AM9DL,ACnBE,IDmBIwD,ECnBExB,SAAS,GAAG,CDmBC,CCnBnB,EDmBsB,SAAlBwB,eAAkB,CAACzF,KAAD,EAAQqD,WAAR,EAAwB;AG9BxC,AR6FL,ADAA,AM9DD,ACnBA,MDmBIsD,ACnBAzC,MEZM,IH+BI,CG/BA,CAACmE,CH+BE3E,ICnBjB,QDmB6B,CAACL,EG/BxB,EAA2B,OH+BQ,CAAChE,EAAb,EAAiBW,KAAjB,CAA7B;AG9BQ,AR6FT,ADAA,CC7LD,ADAA,SSgGU,KAAI,CAACmI,SAAL,GAAiB,IAAjB;AH6BsC,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0F,AFUf,QDQI/C,SGlBM,CAAuBvD,AHkBhB,CAACA,UGlBR,CHkBO,CGlB6ByB,CHkBf+B,UAAd,EAA0BC,KGlBjC,WHkBO,EAA+C;AAChE,ACRD,CA/BD,EAiCA,GDMMpH,QAAQ,GAAGqH,WAAW,CAAC1D,WAAD,EAAcwD,UAAd,CAA1B;AGlBU,AHmBV,MAAI,CAACA,SGnBS,CHmBC,CAAChH,GGnBE,CAACqI,aHmBnB,EACErB,EGpBY,QHoBF,CAAChH,IGpBH,EAAyC,WHoBjD,GAA+BgG,iBAAiB,CAC9CgB,UAD8C,EAE9CC,gBAF8C,CAAhD;AGnBU,AHuBZ,MAAIE,QGvBQ,KAAI,CAAC/D,GHuBI,GGvBT,AHwBVI,GGxBwBiG,QHwBb,CAAC5J,IGxBF,IHwBV,GAAuBmH,UAAU,CAACtH,MAAlC,GAA2CG,QAAQ,CAAC,CAAD,CADrD;AGtBY,AFYd,IAAMmG,cEZY,GFYK,EEZD,CAACkC,AFYG,SAApBlC,GEZQ,EAAuB,KAAI,CAAC+D,MFYhB,CAAC9D,CEZU,QFYX,EAAYC,UAAZ,EAA2B;AEXxC,AHuBX,ACXA,MDWIiB,ACXEhB,OEfI,MAGO,IAAI,AHuBA,GAAGa,ACXE,EEZD,CAACqB,AFYGpC,ODWK,CAACpG,CCXG,CAACL,EAAV,CAC1BiB,GDUH,CGvBqB,CHuBwB,ACXhB,MAE1B2F,GAF0B,CAEtB,CEdU,EAAwC,OFcjDC,UAAD;AEbK,AHuBVW,ACVK,IDULA,OCVqB7C,GEbX,AHuBA,CAACtE,IGvBG,AFae,CEbdsD,AFaekD,GDU9B,EGvBU,CHuBYc,EGvBCsC,EFaM,CAAxB,UEbK,EHuBV;AGtBU,AHuBVzC,ACXK,GAFsB,CDa3BA,ACbF,UDaY,CAACjH,GGvBG,KAAI,CAACmI,IHuBnB,GACElB,KGxBQ,EAAuB,GHwBrB,CAACnH,CGxBwB,CAACkK,MHwBpC,EGxB+B,CHwBT/C,UAAU,CAAChH,iBADnC;AGtBS,AHwBTgH,ACZF,IDYEA,ECZIV,QDYM,CAAC3G,YAAX,ACZyB,GDYC6D,ACZE0C,UAAU,CDYD,ACZE1G,CDYDA,CCZV,CDY5B,ACXCiB,KAD2B,MAE3B2F,GAF2B,CAEvB,UAACC,UAAD;AEbE,AHwBPW,ACXK,IDWLA,OGjCM,AFsBe7C,GDWX,CAAClE,EGxBE,EHwBb,ACX6B,CAACoG,CEbb,CHwBCxG,IGxBG,CAACyI,GHwBI,ACXG,CDWF,ACXtB,CDWqB,CAA1B,GGxBa,EAAoB;AACzB,AHwBRtB,ACZK,GAFuB,CDc5BA,ACdF,QEVU,EHwBE,CAACpH,EGxBC,CAACiK,MHwBb,GAAuBhK,OGxBf,CAAsB2D,AHwBC,CAAC,CAAD,CAA/B,QGxBQ,EAAmCyB,kBAAnC;AACD,AHwBR,ACZD,MAAMsB,EAAE,GAAGJ,oBAAoB,CAAC,CAAD,CAA/B;AEXO,AHwBR,ACZC,CDLF,EAmBA,GCdQK,EAAE,GAAGL,oBAAoB,CAAC,CAAD,CAA/B;AEXK,AFYL,MAAMM,CE3BF,CF2BI,GAAGH,qBAAqB,CAAC,CAAD,CAAhC;AEVIrB,AFWJ,MEXIA,AFWEyB,EAAE,GAAGJ,aEXW,CAACoD,OFWS,CAAC,CAAD,CAAhC,MEXI,eAAkD,UAACC,CAAD,EAAO;AACvD,AHwBR,ACbE,IDaIzC,ECbEP,MEXI,AFWE,GDaG,ACbAlF,EEXD,CAAC+G,AHwBG,CCbC,CAAC5B,GAAL,CAASL,EAAE,CDatBW,ECbyBT,EAAd,CAAf,EEXM,EAA2B,EHwBf,CAACW,OAAD,EAAUC,OAAV,EAAsB;AGvBhC,AHwBR,ACbA,MDaIC,ACbET,MAAM,EEXA,CFWGpF,IEXC,AFWG,CEXF6G,AFWG1B,GAAL,CDaO,ACbEJ,EAAE,CDaDY,EGxBb,AFWiBV,EAAd,CAAf,CEX8B,CHwBE,CAAClH,EAAR,CGxBS,AHwBEiB,CGxBD4H,IHwBV,CAAiB,GAAjB,CAAzB,QGxB8B,aAAtB,EAA2D;AACzD,AHwBV,ACZA,MDYId,GCZGZ,GEZG,GFYG,EEZC,CAACmD,AFYCjD,KDYK,CCZrB,EDYwBQ,OAAO,CAAC7H,CGxBtB,CAAuBgE,AHwBT,CAAW/C,KAAX,CAAiB,GAAjB,CGxBd,AHwBV,EGxB8CwE,kBAApC;AACD,AHwBT,ACZD,CAfD,KD2BMsB,EAAE,GAAGpC,QAAQ,CAACmD,kBAAkB,CAAC,CAAD,CAAnB,CAAjB;AGvBO,AHwBP,MAAId,EAAE,GAAGrC,QAAQ,CAACmD,kBAAkB,CAAC,CAAD,CAAnB,CAAjB;AGvBK,AHwBL,ACZF,IAAMJ,EDYAT,CG9BA,CH8BE,GAAGtC,ICZM,GAAG,CDYD,CAACoD,OCZdL,UDY+B,CAAC,ACZlB,CDYiB,ACZhBE,CDYF,CAAjB,KCZkB,EAAUC,OAAV,EAAsB;AEnEI,AHgF5C,ACZA,MDYIX,ACZAY,EDYE,GAAGnD,QAAQ,CAACoD,ICZI,GAAGH,OAAO,CAAC5H,EDYE,ACZV,CDYW,ACZAiB,CDYD,CAAlB,CAAjB,ECZyB,CAAiB,GAAjB,CAAzB;AACA,MAAI8G,iBAAiB,GAAGF,OAAO,CAAC7H,EAAR,CAAWiB,KAAX,CAAiB,GAAjB,CAAxB;AEpEE,AHgFF,ACXA,MDWIgG,ACXAF,EDWE,ACXA,CErEC,EHgFEA,ACXApC,EErEE7C,AHgFP,GGhFU,CHgFCkF,EGhFE,AHgFA,ACXA,CErEf,AFqEgBc,EErEEhG,EHgFEoF,CGhFC,CHgFvB,EGhF0B,AHgFA,KGhFKnF,KAA7B,AFqEkC,CAAC,CErECD,AFqEF,CAAnB,CAAjB,CErEyC,EAAvC,EAA2C;AAAA,AHiF3C,ACXF,MAAIkF,EDWEY,ACXA,GAAGjD,CEtEE7C,GAAkC,AHiFhC,CAAC1B,GCXG,CAAC0H,KDWZ,KAAsB,IAA1B,EAAgC,ECXE,CAAC,CAAD,CAAnB,CAAjB;AEfG,AH2BC,ACXJ,MAAIb,EAAE,GAAGtC,EDWE,CAAC,CAAD,EAAI,CAAC,CCXC,CAACoD,CDWH,CAAJ,EAAW,IAAX,CAAP,QCX+B,CAAC,CAAD,CAAlB,CAAjB;AEfC,AH2BE,ACXH,KDSE,CCTEb,EAAE,GDWG,ACXAvC,IDWIiD,ICXI,CAACG,EDWE,CAAC3H,SAAR,KAAsB,ACXA,CAAC,CAAD,CAAlB,CAAjB,GDWS,EAAmC;AG1B7C,AH2BK,CGtFN,EA6DA,UHyBa,CAAC,CAAD,EAAI,CAAC,GAAD,EAAM,GAAN,CAAJ,EAAgB,IAAhB,CAAP;AACD,ACZH,KDUS,CCVL6G,EAAE,GDYG,ACZAF,EAAT,EDYaa,ACZA,ODYO,CAACxH,SAAR,KAAsB,MAA1B,EAAkC;AACvC,ACZF,QAAIwH,KDYK,CAAC,CAAD,ACZE,CAACxH,CDYC,CAAC,GAAD,EAAM,ECZf,CDYS,CAAJ,EAAgB,CCZC,GDYjB,CAAP,ACZF,EAAgC;AEbpCqI,AH0BK,ACZC,KEdD,AHwBM,CGxBLW,KH0BK,ECZE,CAAC,CEdd,AH0BexB,ACZF,CEdG0C,CFcC,CAAC,GAAD,CDYK,ACZT,CDYUlK,CCZC,IAAX,CAAP,GDYS,CG1Bf,GAAoC,CH0BC,MAA1B,EAAkC,CG1BC4D,WAAV,EAAuByB,kBAAvB,EAA2C;AAC7E,AH0BI,ACZD,KAFD,CEZE+E,KFcK,EDYE,CAAC,CAAD,ACZE5C,EDYE,CAAC,GG1BhB,AH0Be,CCZK,CDYC,ACZAxH,GDYN,EAAW,GAAX,CAAJ,ACZE,EDYmB,GCZG,CDYxB,CAAP,KCZK,EAAmC;AEb5C,AH0BG,ACZC,KDUK,CGxBL,KAAK8I,AH0BA,ECZE,CAAC,CDYCtB,ACZF,EAAI,CAAC,GAAD,CDYK,CAACxH,ACZA,GAAN,CAAJ,EAAgB,GDYd,CG1Bb,AFcW,CAAP,CEbFoK,EHyBiC,UAA1B,EAAsC,CGzB9B,GAAGtI,QAAQ,CAACC,cAAT,CAAwB,KAAK+G,sBAAL,CAA4BlJ,EAApD,CAAlB;AH0BE,ACZD,KAFM,MAEA,EDYE,CAAC,CCZC4H,EDYF,EAAM,GCZG,CDYT,ACZUxH,EDYE,IAAZ,CAAP,ECZS,KAAsB,MAA1B,EAAkC;AEb3C,AH0BG,ACZC,KDUK,CGxBL4D,KH0BK,ECZE,CAAC,CDYC4D,ACZF,EEdI,AFcA,CEdC3H,AFcA,GAAD,CDYK,CAACG,ACZA,CEdjB,EFcW,CAAJ,EAAgB,GDYd,CCZF,CAAP,GDY+B,IG1BI4D,QH0B9B,EAAwC,CG1BC,CAAC/D,MAAZ,YAAvC,EAAuE;AACrE,AH0BE,ACZD,KAFM,GEZH,GFcG,EEdEiJ,AH0BA,CAAC,CCZCtB,EDYF,EAAM,GCZG,CDYT,ACZUxH,EDYE,IAAZ,CAAP,ECZS,GEdX,EAAiC,AFcA,MAA1B,EAAkC;AEbvC,AH0BD,ACZC,KDUK,MGxBA8I,AH0BA,ECZE,CAAC,CDYCtB,ACZF,EAAI,CAAC,GAAD,CDYK,CAACxH,ACZA,GAAN,EAAW,GAAX,CDYF,ACZF,CEdP,CAA4BH,AFcA,GDYG,CCZxB,CAAP,CEdA,GAAqC,GH0BhC,EG1BqCgJ,AH0BA,2BG1B1C;AACAuB,AH0BA,ACZD,MEdCA,OH0BO,CAAC,GAAD,EAAM,EG1BE,CAAClJ,CH0BT,EAAY,IAAZ,CAAP,CG1BA,GACE,KAAK6H,4BAAL,KAAsC,EAAtC,wBAEI,KAAKF,2BAHX;AAIA,AHuBD,ACZF,GAVD,EDoBS,ICVF,EEXEC,AHuBA,ECZEjC,EDYEW,ACZA,GAAGb,EAAT,EDYa,ACZA,CDYC3G,SAAR,CGvBT,CAA4BF,GHuBG,GGvB/B,GACE,KAAKiJ,AHsBF,EAAuC,0BGtB1C,KAAsC,EAAtC,GAA2C,EAA3C,GAAgD,CADlD;AAEA,AHsBA,ACZF,QAAIvB,GEVGsB,EHsBE,CAAC,CCZC,CAAC9I,CDYH,EAAM,IAAN,EAAY,ACZjB,IDYK,CAAP,ACZwB,GEVxB,CFUF,EEVgC,AFUA,IEV9B;AACA,AHsBD,ACZC,WEVK+I,EFUE,CAAC,CAAD,EAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAJ,EAAqB,KEV5B,CFUO,CAAP,CEVoCnF,WAAW,CAAC9D,MAAhD;AACA,AHsBH,ACZE,GDNH,ECIE,IDcK,EGtBE+I,AFUA,EDYEhC,EAAE,ACZAW,GDYGb,EAAL,ECZS,CAAC3G,CDYC4G,EAAE,KAAKE,CCZhB,CDYN,EAA0B,ECZE,CEV/B,GAAmClD,GFU9B,EAAmC,MEVM,CAAC/D,MAA/C;AACAwF,AHsBF,ACZE,MEVAA,EHsBEmC,KCZK,CAAC,CDYC,ACZF,CDYGxH,CCZC,CAAC,GAAD,EAAM,CEVC,CAACkB,AHsBjB,CCZS,CAAJ,EAAgB,CDYC,IGtBxB,AHsBF,CCZS,CDYuB,ACZ9B,CEV+B,KAAKuH,iBAApC;AACA7E,AHsBA,ACZD,KAFM,CERLA,KFUK,EDYE,CAAC,CAAD,ACZE4D,EEVE,AHsBA,CGtBC3H,AHsBA,GAAD,CCZK,CDYC,ACZAG,CEVjB,EHsBW,CGtBU,CHsBC,GAAX,CGtBeyI,AHsBnB,ACZE,EDYmB,GCZG,GDYxB,CAAP,ECZK,EAAkC,IEVvC;AACA7E,AHsBD,ACZC,KDUF,CGpBEA,KHsBK,ECZE,CAAC,CDYC4D,ACZF,EEVI,AFUA,CEVC1H,AFUA,GAAD,CDYK,CAACE,ACZA,CEVjB,EFUW,CEVU,AFUd,CEVP,CFUuB,GDYd,GCZF,CAAP,CDY+B,OAA1B,EAAmC;AGrBzC,AHsBC,ACZD,KAFM,MAEA,EDYE,CAAC,CAAD,ACZEwH,EDYE,CAAC,GAAD,CCZK,CDYC,ACZAxH,GDYN,CAAJ,EAAgB,GCZd,GDYF,CAAP,CCZ+B,MAA1B,EAAkC;AET1C,AHsBE,ACZC,GE1BJ,EHoCS,IGpBF,EHsBE,EGrBP4D,AFSS,CAAC,CDYC4D,ACZF,EAAI,CAAC,GAAD,CDYK,ACZT,CDYUxH,CGrBR,AFSS,CETRH,KFSH,CETT,AFSE,CDYS,IGrBY,CHqBU,IGrBL4I,EHqBrB,EAAkC,aGrBzC,IACA,CAAC,KAAKH,YAFD,EAGL;AACA,AHmBE,ACZD,SEPIQ,IHmBI,CAAC,CAAD,EAAI,CAAC,GAAD,EAAM,GAAN,CAAJ,EAAgB,EGnBzB,CAA4BjJ,GHmBnB,CAAP,EGnBF,GAAqC,KAAK4I,iBAA1C;AACA2B,AHmBC,ACZF,IEPCA,CHiBO,MAEA,IAAI5C,IGnBI,CAACtG,EHmBE,CAAClB,MGnBnB,GAA4B,AHmBjB,KGnBsByI,AHmBA,MAA1B,EAAkC,SGnBzC;AACD,AHmBG,GGzBG,MAMA,IAAI7E,AHmBA,CAAC,CAAD,EAAI,CAAC,GAAD,CAAJ,EGnBW,AHmBA,CGnBC/D,KHmBZ,CGnBA,AHmBP,KGnB8B,KAAK4I,iBAAhC,EAAmD;AACxD,AHmBC,ACbH,KDWS,CCXL3B,EAAE,CENCgC,EHmBE,ACbAlC,EAAT,EDaaY,ACbA,ODaO,CAACxH,QGnBnB,CHmBW,EGnBmB4D,GHmBG,QGnBjC,EHmBO,EAAsC;AGlB7CyB,AHmBE,ACbF,IENAA,IFMImC,KDaK,CAAC,CCbC,CAACxH,CDaH,EAAM,GGnBG,CAACkB,AHmBV,EAAY,ACbjB,KAAsB,CDajB,CGnBT,AHmBE,ECbF,CEN+B,CFMC,IENI2H,2BAApC;AACAjF,AHmBC,ACbC,IENFA,CHiBO,MAEA,ECbE,CAAC,CENC,AHmBA4D,ACbF,CENG3H,CFMC,CAAC,GAAD,CENb,AHmBkB,CAACG,ACbA,EENE,CFMR,CAAJ,EAAgB,CENC6I,EHmBf,GCbF,CAAP,CDa+B,YAA1B,EAAwC,MGnB/C;AACD,AHmBG,ACbD,KAFD,MAEO,EDaE,CAAC,CCbCrB,EDaF,EAAM,GCbG,CDaT,ACbUxH,EDaE,MAAZ,CAAP,ACbS,KAAsB,OAA1B,EAAmC;AEL7C,AHmBI,ACbC,CErCN,EAiCA,EHeW,MAEA,ECbE,CAAC,CDaCwH,ACbF,EAAI,CAAC,GAAD,CDaK,CAACxH,ACbA,GAAN,EAAW,GAAX,CDaF,ACbF,EAAqB,GDaG,GCbxB,CAAP,KDaK,EAAqC;AAC1C,ACbD,KAFM,MAEA,EDaE,CAAC,CCbCwH,EDaF,EAAM,GCbG,CDaT,ACbUxH,EDaE,MAAZ,CAAP,ACbS,KAAsB,MAA1B,EAAkC;ADcxC,ACbC,KDWK,MAEA,ECbE,CAAC,CDaCwH,ACbF,EAAI,CAAC,GAAD,CDaK,ACbT,CDaUxH,CCbC,MAAX,CAAP,CDaS,KAAsB,WAA1B,EAAuC;AGjBlDqI,AHkBM,ACbD,KELA,AFGM,CEHLW,KFKK,EDaE,CAAC,CGlBd,AFKexB,CELCyC,CHkBH,EAAM,GCbG,CDaT,ACbUjK,EDaE,MAAZ,CGlBb,AHkBM,ACbS,GELoB,EFKE,MAA1B,EELkCgB,AFKA,QELV,EAAoBqJ,eAApB,EAAqC;AACtE,AHkBG,ACbC,MELEhJ,OFKK,CAAC,CAAD,EAAI,CELG,AFKF,GELK,AFKN,EAAM,GAAN,CAAJ,EAAgB,MAAhB,CAAP,IELJ;AACA,AHkBC,ACbE,MELGiJ,eAAe,GAAG,8BAAxB;AFMC,GAVD,MAUO,IAAIxD,EAAE,GAAGF,EAAT,EAAa;AELpB,AHkBA,ACZE,MENE,AHkBAE,CGlBC,CHkBC,ACZAU,GDYGZ,CGlBC+B,CHkBN,ECZS,CAAC3I,CDYC2G,EGlBf,AHkBiB,EGlBE,GHkBGE,CCZhB,CDYN,EAA0B,ECZE,IAA1B,EAAgC;AELhC,AHkBA,ACZE,QENE,AHkBAW,CGlBCnG,IFMI,CAAC,CDYC,ACZF,CDYGrB,CCZC,CAAC,GENG,AFMJ,CENKiC,CFMC,EDYf,CCZS,CAAJ,EAAgB,CENpB,AHkBqB,CGlBCjB,GHkB3B,EAAgC,ACZvB,CAAP,EENiC,CAACnB,MAA/B,CAAL,EAA6C;AAC3CwK,AHkBA,ACZD,KAFD,CEJEA,KFMK,EDYE,CAAC,CAAD,ACZE7C,EDYE,CAAC,GGlBG,AHkBJ,CGlBKtG,AFMA,CDYC,ACZAlB,GDYN,CAAJ,EAAgB,EGlBvB,CFMS,EELPgB,CHiBK,CAAP,CCZ+B,KELrB,CAACnB,CFKN,EAAmC,GELtC,kCADF;AAEAmB,AHiBD,ACZC,KDUF,CGfEA,KHiBK,ECZE,CELC,AFKA,CELCnB,AHiBA2H,ACZF,EAAI,CAAC,GELZ,AFKW,CDYK,ACZT,CDYUxH,CGhBfqK,AFIgB,OAAX,CDYE,ACZT,KDY+B,EGhBd,CAACnJ,IHgBb,EAAmC,GGhBtC,kCADF;AAEAF,AHgBA,ACZD,KAFM,CEFLA,KFIK,EDYE,CGhBC,AHgBA,CGhBClB,AHgBF,ACZE0H,EDYE,CAAC,GGhBZ,AHgBW,CCZK,CDYC,ACZAxH,CEJC,CAAlB,CHgBW,EAAW,GAAX,CAAJ,ACZE,EDYmB,GCZG,GDYxB,CAAP,ECZK,EAAkC;AEHxC,AHgBA,ACZC,KDUK,MAEA,ECZE,CAAC,CDYCwH,ACZF,EAAI,CAAC,GAAD,CDYK,CAACxH,ACZA,GAAN,EAAW,GAAX,CDYF,ACZF,EAAqB,GDYG,ICZxB,CAAP,CDYK,EAAkC;AGf1C,AHgBG,ACZD,GEZH,EFUS,IEFF,EFIE,EEJE,AHgBA,CAAC,CAAD,ACZEwH,EDYE,CGhBCmB,AHgBA,GAAD,CAAJ,ACZS,CAAC3I,CDYC,CGhBX,KAAiB,AHgBjB,CAAP,CGhBO,AFIE,IEJqB,CAACsK,AFIA,MAA1B,EAAkC,OEJO,CAACrI,QAAhB,CAAyB,KAAKsG,IAA9B,CAA5B,EAAiE;AACtE,AHgBC,ACZC,KDUK,GGdH,CAAClH,EHgBE,ECZE,CAAC,CDYCmG,ACZF,EAAI,CAAC,GEJG,AFIJ,CEJKvF,AHgBA,CAACjC,ACZA,GAAN,CAAJ,EAAgB,CEJpB,CAAsBgB,CHgBhB,ICZF,CDYwB,ACZ/B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","file":"browser.d51ab39d.js","sourceRoot":"..","sourcesContent":["// ---------------CLASS FOR THE NODE OBJECT-----------\r\n\r\nfunction Node(id, status) {\r\n  this.id = id;\r\n  this.status = status;\r\n  this.weight = 0;\r\n  this.previousNode = null;\r\n  this.direction = null;\r\n  this.distance = Infinity;\r\n  this.totalDistance = Infinity;\r\n  this.heuristicDistance = null;\r\n  this.path = null;\r\n  this.direction = null;\r\n}\r\n\r\nexport default Node;\r\n","// ------------------FUNCTION FOR GENERATING MAZE ANIMATIONS------------\r\n\r\nconst mazeGenerator = (board) => {\r\n  let speed = 0;\r\n  if (board.speed === `fast`) speed = 5;\r\n  else if (board.speed === `average`) speed = 25;\r\n  else if (board.speed === `slow`) speed = 75;\r\n\r\n  for (\r\n    let currIndex = 0;\r\n    currIndex < board.wallsAnimationArray.length;\r\n    currIndex++\r\n  ) {\r\n    setTimeout(() => {\r\n      const currElement = board.wallsAnimationArray[currIndex];\r\n      const [i, j] = currElement.id.split(`-`);\r\n      const currNode = board.allNodesArray[i][j];\r\n      currElement.className =\r\n        currNode.weight === 0 ? `wall` : `unvisited weight`;\r\n\r\n      if (currIndex === board.wallsAnimationArray.length - 1) {\r\n        board.wallsAnimationArray = [];\r\n        board.toggleButtons();\r\n      }\r\n    }, speed * (currIndex + 1));\r\n  }\r\n};\r\nexport default mazeGenerator;\r\n","// ---------------------FUNCTION FOR GENERATING RANDOM WALL OR WEIGHT MAZE--------------------\r\n\r\nlet specialNodes = [`start`, `target`];\r\n\r\nconst randomMaze = (board, type) => {\r\n  for (let row = 0; row < board.height; row++) {\r\n    for (let col = 0; col < board.width; col++) {\r\n      let random = Math.random();\r\n      const currElement = document.getElementById(`${row}-${col}`);\r\n      const currNode = board.allNodesArray[row][col];\r\n      let limit = type === `wall` ? 0.25 : 0.35;\r\n      if (random < limit && !specialNodes.includes(currElement.className)) {\r\n        if (type === `wall`) {\r\n          currElement.className = `wall`;\r\n          currNode.status = `wall`;\r\n          currNode.weight = 0;\r\n        } else if (type === `weight`) {\r\n          currElement.className = `unvisited weight`;\r\n          currNode.status = \"unvisited\";\r\n          currNode.weight = 15;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  board.toggleButtons();\r\n};\r\n\r\nexport default randomMaze;\r\n","// ------------FUNCTION FOR GENERATING RECURSIVE VERTICALLY SKEWED MAZE------------------\r\n\r\nconst specialNodes = [`start`, `target`];\r\n\r\nconst verticalSkewMaze = (\r\n  board,\r\n  rowsi,\r\n  rowei,\r\n  colsi,\r\n  colei,\r\n  orientation,\r\n  outerWalls\r\n) => {\r\n  if (rowei < rowsi || colei < colsi) return;\r\n  if (!outerWalls) {\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        const currNode = board.getNode(`${row}-${col}`);\r\n        if (!specialNodes.includes(currNode.status)) {\r\n          if (\r\n            row === 0 ||\r\n            row === board.height - 1 ||\r\n            col === 0 ||\r\n            col === board.width - 1\r\n          ) {\r\n            const currElement = document.getElementById(`${row}-${col}`);\r\n            board.wallsAnimationArray.push(currElement);\r\n            currNode.status = `wall`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    outerWalls = true;\r\n  }\r\n\r\n  if (orientation === `horizontal`) {\r\n    let possibleRows = [];\r\n    for (let currIndex = rowsi; currIndex <= rowei; currIndex += 2) {\r\n      possibleRows.push(currIndex);\r\n    }\r\n\r\n    let possibleCols = [];\r\n    for (let currIndex = colsi - 1; currIndex <= colei + 1; currIndex += 2) {\r\n      possibleCols.push(currIndex);\r\n    }\r\n\r\n    let randomRI = Math.floor(Math.random() * possibleRows.length);\r\n    let randomCI = Math.floor(Math.random() * possibleCols.length);\r\n    let currentRow = possibleRows[randomRI];\r\n    let columnRandom = possibleCols[randomCI];\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        if ((row + col) * Math.random() < 40) {\r\n          const currNode = board.getNode(`${row}-${col}`);\r\n          if (!specialNodes.includes(currNode.status)) {\r\n            if (\r\n              row === currentRow &&\r\n              col !== columnRandom &&\r\n              col >= colsi - 1 &&\r\n              col <= colei + 1\r\n            ) {\r\n              const currElement = document.getElementById(`${row}-${col}`);\r\n              board.wallsAnimationArray.push(currElement);\r\n              currNode.status = `wall`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentRow - 2 - rowsi > colei - colsi) {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        currentRow - 2,\r\n        colsi,\r\n        colei,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        currentRow - 2,\r\n        colsi,\r\n        colei,\r\n        `vertical`,\r\n        outerWalls\r\n      );\r\n    }\r\n    if (rowei - (currentRow + 2) > colei - colsi) {\r\n      verticalSkewMaze(\r\n        board,\r\n        currentRow + 2,\r\n        rowei,\r\n        colsi,\r\n        colei,\r\n        `vertical`,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      verticalSkewMaze(\r\n        board,\r\n        currentRow + 2,\r\n        rowei,\r\n        colsi,\r\n        colei,\r\n        `vertical`,\r\n        outerWalls\r\n      );\r\n    }\r\n  } else {\r\n    let possibleCols = [];\r\n    for (let currIndex = colsi; currIndex <= colei; currIndex += 2) {\r\n      possibleCols.push(currIndex);\r\n    }\r\n\r\n    let possibleRows = [];\r\n    for (let currIndex = rowsi - 1; currIndex <= rowei + 1; currIndex += 2) {\r\n      possibleRows.push(currIndex);\r\n    }\r\n\r\n    let randomCI = Math.floor(Math.random() * possibleCols.length);\r\n    let randomRI = Math.floor(Math.random() * possibleRows.length);\r\n    let currentCol = possibleCols[randomCI];\r\n    let rowRandom = possibleCols[randomRI];\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        if (\r\n          (row + (col % 50)) * Math.random() < 22 &&\r\n          ((row % 15) + col) * Math.random() < 22\r\n        ) {\r\n          const currNode = board.getNode(`${row}-${col}`);\r\n          if (!specialNodes.includes(currNode.status)) {\r\n            if (\r\n              col === currentCol &&\r\n              row !== rowRandom &&\r\n              row >= rowsi - 1 &&\r\n              row <= rowei + 1\r\n            ) {\r\n              const currElement = document.getElementById(`${row}-${col}`);\r\n              board.wallsAnimationArray.push(currElement);\r\n              currNode.status = `wall`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (rowei - rowsi > currentCol - 2 - colsi) {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        colsi,\r\n        currentCol - 2,\r\n        `vertical`,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        colsi,\r\n        currentCol - 2,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    }\r\n    if (rowei - rowsi > colei - (currentCol + 2)) {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        currentCol + 2,\r\n        colei,\r\n        `horizontal`,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      verticalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        currentCol + 2,\r\n        colei,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    }\r\n  }\r\n};\r\nexport default verticalSkewMaze;\r\n","// ------------FUNCTION FOR GENERATING RECURSIVE HORIZONTALLY SKEWED MAZE------------------\r\n\r\nconst specialNodes = [`start`, `target`];\r\n\r\nconst horizontalSkewMaze = (\r\n  board,\r\n  rowsi,\r\n  rowei,\r\n  colsi,\r\n  colei,\r\n  orientation,\r\n  outerWalls\r\n) => {\r\n  if (rowei < rowsi || colei < colsi) return;\r\n  if (!outerWalls) {\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        const currNode = board.getNode(`${row}-${col}`);\r\n        if (!specialNodes.includes(currNode.status)) {\r\n          if (\r\n            row === 0 ||\r\n            row === board.height - 1 ||\r\n            col === 0 ||\r\n            col === board.width - 1\r\n          ) {\r\n            const currElement = document.getElementById(`${row}-${col}`);\r\n            board.wallsAnimationArray.push(currElement);\r\n            currNode.status = `wall`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    outerWalls = true;\r\n  }\r\n\r\n  if (orientation === `horizontal`) {\r\n    let possibleRows = [];\r\n    for (let currIndex = rowsi; currIndex <= rowei; currIndex += 2) {\r\n      possibleRows.push(currIndex);\r\n    }\r\n\r\n    let possibleCols = [];\r\n    for (let currIndex = colsi - 1; currIndex <= colei + 1; currIndex += 2) {\r\n      possibleCols.push(currIndex);\r\n    }\r\n\r\n    let randomRI = Math.floor(Math.random() * possibleRows.length);\r\n    let randomCI = Math.floor(Math.random() * possibleCols.length);\r\n    let currentRow = possibleRows[randomRI];\r\n    let columnRandom = possibleCols[randomCI];\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        if ((row + col) * Math.random() < 20) {\r\n          const currNode = board.getNode(`${row}-${col}`);\r\n          if (!specialNodes.includes(currNode.status)) {\r\n            if (\r\n              row === currentRow &&\r\n              col !== columnRandom &&\r\n              col >= colsi - 1 &&\r\n              col <= colei + 1\r\n            ) {\r\n              const currElement = document.getElementById(`${row}-${col}`);\r\n              board.wallsAnimationArray.push(currElement);\r\n              currNode.status = `wall`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (currentRow - 2 - rowsi > colei - colsi) {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        currentRow - 2,\r\n        colsi,\r\n        colei,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        currentRow - 2,\r\n        colsi,\r\n        colei,\r\n        `horizontal`,\r\n        outerWalls\r\n      );\r\n    }\r\n    if (rowei - (currentRow + 2) > colei - colsi) {\r\n      horizontalSkewMaze(\r\n        board,\r\n        currentRow + 2,\r\n        rowei,\r\n        colsi,\r\n        colei,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      horizontalSkewMaze(\r\n        board,\r\n        currentRow + 2,\r\n        rowei,\r\n        colsi,\r\n        colei,\r\n        `vertical`,\r\n        outerWalls\r\n      );\r\n    }\r\n  } else {\r\n    let possibleCols = [];\r\n    for (let currIndex = colsi; currIndex <= colei; currIndex += 2) {\r\n      possibleCols.push(currIndex);\r\n    }\r\n\r\n    let possibleRows = [];\r\n    for (let currIndex = rowsi - 1; currIndex <= rowei + 1; currIndex += 2) {\r\n      possibleRows.push(currIndex);\r\n    }\r\n\r\n    let randomCI = Math.floor(Math.random() * possibleCols.length);\r\n    let randomRI = Math.floor(Math.random() * possibleRows.length);\r\n    let currentCol = possibleCols[randomCI];\r\n    let rowRandom = possibleCols[randomRI];\r\n    for (let row = 0; row < board.height; row++) {\r\n      for (let col = 0; col < board.width; col++) {\r\n        if (\r\n          (row + (col % 50)) * Math.random() < 22 &&\r\n          ((row % 15) + col) * Math.random() < 22\r\n        ) {\r\n          const currNode = board.getNode(`${row}-${col}`);\r\n          if (!specialNodes.includes(currNode.status)) {\r\n            if (\r\n              col === currentCol &&\r\n              row !== rowRandom &&\r\n              row >= rowsi - 1 &&\r\n              row <= rowei + 1\r\n            ) {\r\n              const currElement = document.getElementById(`${row}-${col}`);\r\n              board.wallsAnimationArray.push(currElement);\r\n              currNode.status = `wall`;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (rowei - rowsi > currentCol - 2 - colsi) {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        colsi,\r\n        currentCol - 2,\r\n        `horizontal`,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        colsi,\r\n        currentCol - 2,\r\n        `horizontal`,\r\n        outerWalls\r\n      );\r\n    }\r\n    if (rowei - rowsi > colei - (currentCol + 2)) {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        currentCol + 2,\r\n        colei,\r\n        `horizontal`,\r\n        outerWalls\r\n      );\r\n    } else {\r\n      horizontalSkewMaze(\r\n        board,\r\n        rowsi,\r\n        rowei,\r\n        currentCol + 2,\r\n        colei,\r\n        orientation,\r\n        outerWalls\r\n      );\r\n    }\r\n  }\r\n};\r\nexport default horizontalSkewMaze;\r\n","// ------------FUNCTION FOR GENERATING STAIR MAZE---------------------\r\n\r\nconst specialNodes = [`start`, `target`];\r\nconst stairMaze = (board) => {\r\n  let row = board.height - 1;\r\n  let col = 0;\r\n  while (row > 0 && col < board.width) {\r\n    const currNode = board.allNodesArray[row][col];\r\n    const currElement = document.getElementById(`${row}-${col}`);\r\n    if (!specialNodes.includes(currNode.status)) {\r\n      currNode.status = `wall`;\r\n      board.wallsAnimationArray.push(currElement);\r\n    }\r\n    row--;\r\n    col++;\r\n  }\r\n  while (row < board.height - 2 && col < board.width) {\r\n    const currNode = board.allNodesArray[row][col];\r\n    const currElement = document.getElementById(`${row}-${col}`);\r\n    if (!specialNodes.includes(currNode.status)) {\r\n      currNode.status = `wall`;\r\n      board.wallsAnimationArray.push(currElement);\r\n    }\r\n    row++;\r\n    col++;\r\n  }\r\n\r\n  while (row > 0 && col < board.width - 1) {\r\n    const currNode = board.allNodesArray[row][col];\r\n    const currElement = document.getElementById(`${row}-${col}`);\r\n    if (!specialNodes.includes(currNode.status)) {\r\n      currNode.status = `wall`;\r\n      board.wallsAnimationArray.push(currElement);\r\n    }\r\n    row--;\r\n    col++;\r\n  }\r\n};\r\n\r\nexport default stairMaze;\r\n","// While breadthfirst search uses a queue to visit nodes of all children connected to the node , depthfirst uses a stack and explores in one direction completely and then others .\r\n\r\n// ---------------------FUNCTION FOR BREADTH-FIRST AND DEPTH-FIRST SEARCH--------------------\r\n\r\nconst unweightedAlgorithm = (board, type) => {\r\n  if (\r\n    board.start.length === 0 ||\r\n    board.target.length === 0 ||\r\n    board.start === board.target\r\n  ) {\r\n    return false;\r\n  }\r\n  let starting = board.getNode(board.start);\r\n  let queue = [starting];\r\n  let visitedNodes = { starting: true };\r\n\r\n  while (queue.length) {\r\n    let currentNode = type === `breadthfirst` ? queue.shift() : queue.pop();\r\n    board.nodesToAnimate.push(currentNode);\r\n    if (type === `depthfirst`) visitedNodes[currentNode.id] = true;\r\n    currentNode.status = `visited`;\r\n    if (currentNode.id === board.target) return `success`;\r\n    let currentNeighbors = getNeighbors(currentNode.id, board, type);\r\n    console.log(currentNode.id, currentNeighbors);\r\n    currentNeighbors.forEach((neighbour) => {\r\n      if (!visitedNodes[neighbour]) {\r\n        if (type === `breadthfirst`) visitedNodes[neighbour] = true;\r\n        board.getNode(neighbour).previousNode = currentNode.id;\r\n        queue.push(board.getNode(neighbour));\r\n      }\r\n    });\r\n  }\r\n  return false;\r\n};\r\n\r\n// --------------FUNCTION FOR EXPLORING FOUR POSSIBLE NEIGHBOURS OF A NODE-------------------\r\n\r\nfunction getNeighbors(id, board, type) {\r\n  let coordinates = id.split(`-`);\r\n  let row = parseInt(coordinates[0]);\r\n  let col = parseInt(coordinates[1]);\r\n  let neighbors = [];\r\n  let potentialNeighbor;\r\n  if (board.allNodesArray[row - 1] && board.allNodesArray[row - 1][col]) {\r\n    potentialNeighbor = `${(row - 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`) {\r\n      if (type === \"breadthfirst\") {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (board.allNodesArray[row][col + 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col + 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`) {\r\n      if (type === `breadthfirst`) {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (board.allNodesArray[row + 1] && board.allNodesArray[row + 1][col]) {\r\n    potentialNeighbor = `${(row + 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`) {\r\n      if (name === `breadthfirst`) {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  if (board.allNodesArray[row][col - 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col - 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`) {\r\n      if (name === `breadthfirst`) {\r\n        neighbors.push(potentialNeighbor);\r\n      } else {\r\n        neighbors.unshift(potentialNeighbor);\r\n      }\r\n    }\r\n  }\r\n  return neighbors;\r\n}\r\n\r\nexport default unweightedAlgorithm;\r\n","//-----------------FUNCTION FOR GETTING SHORTEST PATH IN ARRAY -----------------\r\n\r\nconst addShortestPath = (board, type) => {\r\n  let currentNode;\r\n  currentNode = board.getNode(board.getNode(board.target).previousNode);\r\n  while (currentNode.id !== board.start) {\r\n    board.shortestPathNodesToAnimate.unshift(currentNode);\r\n    if (type === `draw`) {\r\n      document.getElementById(currentNode.id).className = `shortest-path`;\r\n    }\r\n    currentNode = board.getNode(currentNode.previousNode);\r\n  }\r\n};\r\n\r\n//---------------------FUNCTION FOR DRAWING SHORTEST PATH---------------------\r\n\r\nconst drawShortestPathTimeout = (board, type) => {\r\n  let currentNode;\r\n  let currentNodesToAnimate = [];\r\n  currentNode = board.getNode(board.getNode(board.target).previousNode);\r\n  while (currentNode.id !== board.start) {\r\n    currentNodesToAnimate.unshift(currentNode);\r\n    currentNode = board.getNode(currentNode.previousNode);\r\n  }\r\n\r\n  const timeout = (currentIndex) => {\r\n    if (!currentNodesToAnimate.length) {\r\n      currentNodesToAnimate.push(board.getNode(board.start));\r\n    }\r\n    setTimeout(function () {\r\n      if (currentIndex === 0) {\r\n        shortestPathChange(currentNodesToAnimate[currentIndex]);\r\n      } else if (currentIndex < currentNodesToAnimate.length) {\r\n        shortestPathChange(\r\n          currentNodesToAnimate[currentIndex],\r\n          currentNodesToAnimate[currentIndex - 1]\r\n        );\r\n      } else if (currentIndex === currentNodesToAnimate.length) {\r\n        shortestPathChange(\r\n          board.getNode(board.target),\r\n          currentNodesToAnimate[currentIndex - 1],\r\n          `target`\r\n        );\r\n      }\r\n      if (currentIndex > currentNodesToAnimate.length) {\r\n        board.toggleButtons();\r\n        return;\r\n      }\r\n      timeout(currentIndex + 1);\r\n    }, 40);\r\n  };\r\n\r\n  function shortestPathChange(currentNode, previousNode, istarget) {\r\n    if (currentNode.id !== board.start) {\r\n      if (\r\n        currentNode.id !== board.target ||\r\n        (currentNode.id === board.target && istarget)\r\n      ) {\r\n        let currentNodeElement = document.getElementById(currentNode.id);\r\n        if (type === `unweighted`) {\r\n          currentNodeElement.className = `shortest-path-unweighted`;\r\n        } else {\r\n          let direction = `direction`;\r\n          if (currentNode[direction] === `up`) {\r\n            currentNodeElement.className = `shortest-path-up`;\r\n          } else if (currentNode[direction] === `down`) {\r\n            currentNodeElement.className = `shortest-path-down`;\r\n          } else if (currentNode[direction] === `right`) {\r\n            currentNodeElement.className = `shortest-path-right`;\r\n          } else if (currentNode[direction] === `left`) {\r\n            currentNodeElement.className = `shortest-path-left`;\r\n          } else {\r\n            currentNodeElement.className = `shortest-path`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (previousNode) {\r\n      if (previousNode.id !== board.target && previousNode.id !== board.start) {\r\n        let previousNodeElement = document.getElementById(previousNode.id);\r\n        previousNodeElement.className =\r\n          previousNode.weight === 15 ? `shortest-path weight` : `shortest-path`;\r\n      }\r\n    } else {\r\n      let element = document.getElementById(board.start);\r\n      element.className = `startTransparent`;\r\n    }\r\n  }\r\n  timeout(0);\r\n};\r\n\r\nexport { addShortestPath, drawShortestPathTimeout };\r\n","import { drawShortestPathTimeout } from \"../animations/shortestPathAnimation.js\";\r\n\r\n// ------------------FUNCTION FOR LAUNCHING ANIMATIONS--------------------\r\n\r\nconst launchAnimations = (board, success, type) => {\r\n  let nodesToAnimate = [...board.nodesToAnimate];\r\n  let speed =\r\n    board.speed === `fast` ? 0 : board.speed === `average` ? 100 : 500;\r\n\r\n  const timeout = (currIndex) => {\r\n    setTimeout(function () {\r\n      if (currIndex === nodesToAnimate.length) {\r\n        board.nodesToAnimate = [];\r\n        if (success) {\r\n          if (\r\n            document.getElementById(board.target).className !==\r\n            `visitedTargetNodeBlue`\r\n          ) {\r\n            document.getElementById(\r\n              board.target\r\n            ).className = `visitedTargetNodeBlue`;\r\n          }\r\n          drawShortestPathTimeout(board, type);\r\n          board.shortestPathNodesToAnimate = [];\r\n          board.reset();\r\n          return;\r\n        } else {\r\n          board.reset();\r\n          board.toggleButtons();\r\n          return;\r\n        }\r\n      } else if (currIndex === 0) {\r\n        document.getElementById(board.start).className = `visitedStartNodeBlue`;\r\n        change(nodesToAnimate[currIndex]);\r\n      } else {\r\n        change(nodesToAnimate[currIndex], nodesToAnimate[currIndex - 1]);\r\n      }\r\n      timeout(currIndex + 1);\r\n    }, speed);\r\n  };\r\n\r\n  const change = (currentNode, previousNode) => {\r\n    let currentNodeElement = document.getElementById(currentNode.id);\r\n    const specialClasses = [\r\n      `start`,\r\n      `target`,\r\n      `visitedStartNodeBlue`,\r\n      `visitedTargetNodeBlue`,\r\n    ];\r\n    if (!specialClasses.includes(currentNodeElement.className)) {\r\n      currentNodeElement.className =\r\n        currentNode.weight === 15 ? `visited weight` : `visited`;\r\n    }\r\n\r\n    if (previousNode) {\r\n      let previousNodeElement = document.getElementById(previousNode.id);\r\n      if (!specialClasses.includes(previousNodeElement.className)) {\r\n        previousNodeElement.className =\r\n          previousNode.weight === 15 ? `visited weight` : `visited`;\r\n      }\r\n    }\r\n  };\r\n\r\n  timeout(0);\r\n};\r\n\r\nexport default launchAnimations;\r\n","//The basic approach of A* is that it precomputes distances before taking decisions on what to choose\r\n// It consists of g-cost which is the distance from start node and h-cost which is the distance from target\r\n//f-cost = g-cost + h-cost.\r\n\r\n//Since A* is a weighted algorithm along with dijkstra's algorithm and greedy best first search they get called from weightedAlgorithms.js\r\n\r\n//---------------------FUNCTION FOR A* ALGORITHM------------------------\r\n\r\nconst astarAlgorithm = (board) => {\r\n  if (\r\n    board.start.length === 0 ||\r\n    board.target.length === 0 ||\r\n    board.start === board.target\r\n  ) {\r\n    return false;\r\n  }\r\n\r\n  board.getNode(board.start).distance = 0;\r\n  board.getNode(board.start).totalDistance = 0;\r\n  board.getNode(board.start).direction = `up`;\r\n  let unvisitedNodes = [];\r\n  for (let row = 0; row < board.height; row++) {\r\n    for (let col = 0; col < board.width; col++) {\r\n      unvisitedNodes.push(`${row}-${col}`);\r\n    }\r\n  }\r\n\r\n  while (unvisitedNodes.length) {\r\n    let currentNode = closestNode(board, unvisitedNodes);\r\n    while (currentNode.status === `wall` && unvisitedNodes.length) {\r\n      currentNode = closestNode(board, unvisitedNodes);\r\n    }\r\n    if (currentNode.distance === Infinity) return false;\r\n    board.nodesToAnimate.push(currentNode);\r\n    currentNode.status = `visited`;\r\n    if (currentNode.id === board.target) {\r\n      return `success`;\r\n    }\r\n    updateNeighbors(board, currentNode);\r\n  }\r\n};\r\n\r\n// ------------FUNCTION FOR GETTING THE CLOSEST NODE ACCORDING TO DISTANCES---------------\r\n\r\nconst closestNode = (board, unvisitedNodes) => {\r\n  let currentClosest;\r\n  let index;\r\n\r\n  for (let currIndex = 0; currIndex < unvisitedNodes.length; currIndex++) {\r\n    if (\r\n      !currentClosest ||\r\n      currentClosest.totalDistance >\r\n        board.getNode(unvisitedNodes[currIndex]).totalDistance\r\n    ) {\r\n      currentClosest = board.getNode(unvisitedNodes[currIndex]);\r\n      index = currIndex;\r\n    } else if (\r\n      currentClosest.totalDistance ===\r\n      board.getNode(unvisitedNodes[currIndex]).totalDistance\r\n    ) {\r\n      if (\r\n        currentClosest.heuristicDistance >\r\n        board.getNode(unvisitedNodes[currIndex]).heuristicDistance\r\n      ) {\r\n        currentClosest = board.getNode(unvisitedNodes[currIndex]);\r\n        index = currIndex;\r\n      }\r\n    }\r\n  }\r\n  unvisitedNodes.splice(index, 1);\r\n  return currentClosest;\r\n};\r\n\r\n// ---------------------FUNCTION FOR GETTING DIFFERENCE OF DISTANCE BETWEEN TWO NODES---------------\r\n\r\nconst manhattanDistance = (firstNode, secondNode) => {\r\n  const firstNodeCoordinates = firstNode.id\r\n    .split(`-`)\r\n    .map((coordinate) => parseInt(coordinate));\r\n  const secondNodeCoordinates = secondNode.id\r\n    .split(`-`)\r\n    .map((coordinate) => parseInt(coordinate));\r\n  const x1 = firstNodeCoordinates[0];\r\n  const y1 = firstNodeCoordinates[1];\r\n  const x2 = secondNodeCoordinates[0];\r\n  const y2 = secondNodeCoordinates[1];\r\n  const deltax = Math.abs(x1 - x2);\r\n  const deltay = Math.abs(y1 - y2);\r\n\r\n  return deltax + deltay;\r\n};\r\n\r\n// -------------------FUNCTION FOR EXPLORING FOUR NEIGHBOURS OF A NODE --------------------\r\n\r\nconst getNeighbors = (id, board) => {\r\n  let coordinates = id.split(`-`);\r\n  let row = parseInt(coordinates[0]);\r\n  let col = parseInt(coordinates[1]);\r\n  const neighbors = [];\r\n  let potentialNeighbor;\r\n\r\n  if (board.allNodesArray[row - 1] && board.allNodesArray[row - 1][col]) {\r\n    potentialNeighbor = `${(row - 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row + 1] && board.allNodesArray[row + 1][col]) {\r\n    potentialNeighbor = `${(row + 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row][col - 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col - 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row][col + 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col + 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n  return neighbors;\r\n};\r\n\r\n// ----------------FUNCTIONS FOR UPDATING THE DISTANCES OF NEIGHBOURS RELATIVE TO START AND TARGET NODE -----------------\r\n\r\nconst updateNeighbors = (board, currentNode) => {\r\n  let neighbours = getNeighbors(currentNode.id, board);\r\n  for (let neighbour of neighbours) {\r\n    if (board.target.length !== 0) {\r\n      updateNode(\r\n        currentNode,\r\n        board.getNode(neighbour),\r\n        board.getNode(board.target)\r\n      );\r\n    } else {\r\n      updateNode(currentNode, board.getNode(neighbour));\r\n    }\r\n  }\r\n};\r\n\r\nconst updateNode = (currentNode, targetNode, actualTargetNode) => {\r\n  let distance = getDistance(currentNode, targetNode);\r\n  if (!targetNode.heuristicDistance)\r\n    targetNode.heuristicDistance = manhattanDistance(\r\n      targetNode,\r\n      actualTargetNode\r\n    );\r\n  let distanceToCompare =\r\n    currentNode.distance + targetNode.weight + distance[0];\r\n  if (distanceToCompare < targetNode.distance) {\r\n    targetNode.distance = distanceToCompare;\r\n    targetNode.totalDistance =\r\n      targetNode.distance + targetNode.heuristicDistance;\r\n    targetNode.previousNode = currentNode.id;\r\n    targetNode.path = distance[1];\r\n    targetNode.direction = distance[2];\r\n  }\r\n};\r\n\r\n// -----------------FUNCTION FOR GETTING DISTANCE BETWEEN TWO NODES -----------------\r\n\r\nconst getDistance = (nodeOne, nodeTwo) => {\r\n  let currentCoordinates = nodeOne.id.split(\"-\");\r\n  let targetCoordinates = nodeTwo.id.split(\"-\");\r\n  let x1 = parseInt(currentCoordinates[0]);\r\n  let y1 = parseInt(currentCoordinates[1]);\r\n  let x2 = parseInt(targetCoordinates[0]);\r\n  let y2 = parseInt(targetCoordinates[1]);\r\n  if (x2 < x1 && y1 === y2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [1, [\"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"l\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"r\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [1.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [2.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [1.5, null, \"up\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [2.5, null, \"up\"];\r\n    }\r\n  } else if (x2 > x1 && y1 === y2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"l\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [1, [\"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [2.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [1.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [2.5, null, \"down\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [1.5, null, \"down\"];\r\n    }\r\n  }\r\n  if (y2 < y1 && x1 === x2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [1, [\"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"r\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [2.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [2.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [1.5, null, \"left\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [1.5, null, \"left\"];\r\n    }\r\n  } else if (y2 > y1 && x1 === x2) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [1, [\"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"l\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"up-right\") {\r\n      return [1.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"down-right\") {\r\n      return [1.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"up-left\") {\r\n      return [2.5, null, \"right\"];\r\n    } else if (nodeOne.direction === \"down-left\") {\r\n      return [2.5, null, \"right\"];\r\n    }\r\n  }\r\n};\r\n\r\nexport default astarAlgorithm;\r\n","//Greedy best first search is also based on precumputations but unlike A* the f-cost = h-cost which is the distance from target nodes so A* is better\r\n\r\n//Dijkstra's Algorithm assumes that all nodes other than source are at Infinity and so finds the path to target by always updating the neighbours.\r\n\r\nimport astarAlgorithm from \"../searchAlgorithms/astarAlgorithm.js\";\r\n\r\n// -----------------------FUNCTION FOR WEIGHTED ALGORITHMS----------------------\r\n\r\nconst weightedAlgorithms = (board, type) => {\r\n  if (type === `astar`) return astarAlgorithm(board);\r\n\r\n  if (\r\n    board.start.length === 0 ||\r\n    board.target.length === 0 ||\r\n    board.start === board.target\r\n  ) {\r\n    return false;\r\n  }\r\n  board.getNode(board.start).distance = 0;\r\n  board.getNode(board.start).direction = `right`;\r\n  let unvisitedNodes = [];\r\n  for (let row = 0; row < board.height; row++) {\r\n    for (let col = 0; col < board.width; col++) {\r\n      unvisitedNodes.push(`${row}-${col}`);\r\n    }\r\n  }\r\n\r\n  while (unvisitedNodes.length) {\r\n    let currentNode = closestNode(board, unvisitedNodes);\r\n    while (currentNode.status === `wall` && unvisitedNodes.length) {\r\n      currentNode = closestNode(board, unvisitedNodes);\r\n    }\r\n    if (currentNode.distance === Infinity) {\r\n      return false;\r\n    }\r\n    board.nodesToAnimate.push(currentNode);\r\n    currentNode.status = `visited`;\r\n    if (currentNode.id === board.target) {\r\n      return `success`;\r\n    }\r\n\r\n    if (type === `bestfirst`) {\r\n      updateNeighbors(board, currentNode, type);\r\n    } else if (type === `dijkstra`) {\r\n      updateNeighbors(board, currentNode, type);\r\n    }\r\n  }\r\n};\r\n\r\n// --------------------FUNCTION FOR FINDING THE CLOSEST NODE--------------------\r\n\r\nconst closestNode = (board, unvisitedNodes) => {\r\n  let currentClosest, index;\r\n  for (let currIndex = 0; currIndex < unvisitedNodes.length; currIndex++) {\r\n    if (\r\n      !currentClosest ||\r\n      currentClosest.distance >\r\n        board.getNode(unvisitedNodes[currIndex]).distance\r\n    ) {\r\n      currentClosest = board.getNode(unvisitedNodes[currIndex]);\r\n      index = currIndex;\r\n    }\r\n  }\r\n  unvisitedNodes.splice(index, 1);\r\n  return currentClosest;\r\n};\r\n\r\n// ------------------FUNCTION FOR UPDATING NEIGHBOURS  AND NODES-----------------\r\n\r\nconst updateNeighbors = (board, currentNode, type) => {\r\n  let neighbours = getNeighbors(currentNode.id, board);\r\n  for (let neighbour of neighbours) {\r\n    if (board.target.length !== 0) {\r\n      updateNode(\r\n        currentNode,\r\n        board.getNode(neighbour),\r\n        board.getNode(board.target),\r\n        type\r\n      );\r\n    } else {\r\n      updateNode(currentNode, board.getNode(neighbour), type);\r\n    }\r\n  }\r\n};\r\n\r\nfunction updateNode(currentNode, targetNode, actualTargetNode, type) {\r\n  let distance = getDistance(currentNode, targetNode);\r\n  let distanceToCompare;\r\n  if (actualTargetNode && type === `bestfirst`) {\r\n    distanceToCompare =\r\n      targetNode.weight +\r\n      distance[0] +\r\n      manhattanDistance(targetNode, actualTargetNode);\r\n  } else {\r\n    distanceToCompare = currentNode.distance + targetNode.weight + distance[0];\r\n  }\r\n  if (distanceToCompare < targetNode.distance) {\r\n    targetNode.distance = distanceToCompare;\r\n    targetNode.previousNode = currentNode.id;\r\n    targetNode.path = distance[1];\r\n    targetNode.direction = distance[2];\r\n  }\r\n}\r\n\r\n// ------------------FUNCTION FOR EXPLORING ALL FOUR NEIGHBOURS OF A NODE-------------------\r\n\r\nconst getNeighbors = (id, board) => {\r\n  let coordinates = id.split(`-`);\r\n  let row = parseInt(coordinates[0]);\r\n  let col = parseInt(coordinates[1]);\r\n  const neighbors = [];\r\n  let potentialNeighbor;\r\n\r\n  if (board.allNodesArray[row - 1] && board.allNodesArray[row - 1][col]) {\r\n    potentialNeighbor = `${(row - 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row + 1] && board.allNodesArray[row + 1][col]) {\r\n    potentialNeighbor = `${(row + 1).toString()}-${col.toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row][col - 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col - 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n\r\n  if (board.allNodesArray[row][col + 1]) {\r\n    potentialNeighbor = `${row.toString()}-${(col + 1).toString()}`;\r\n    if (board.getNode(potentialNeighbor).status !== `wall`)\r\n      neighbors.push(potentialNeighbor);\r\n  }\r\n  return neighbors;\r\n};\r\n\r\n// ------------------FUNCTION FOR CALCULATING DISTANCES BETWEEN NODES-----------------------\r\n\r\nconst manhattanDistance = (firstNode, secondNode) => {\r\n  const firstNodeCoordinates = firstNode.id\r\n    .split(`-`)\r\n    .map((coordinate) => parseInt(coordinate));\r\n  const secondNodeCoordinates = secondNode.id\r\n    .split(`-`)\r\n    .map((coordinate) => parseInt(coordinate));\r\n  const x1 = firstNodeCoordinates[0];\r\n  const y1 = firstNodeCoordinates[1];\r\n  const x2 = secondNodeCoordinates[0];\r\n  const y2 = secondNodeCoordinates[1];\r\n  const deltax = Math.abs(x1 - x2);\r\n  const deltay = Math.abs(y1 - y2);\r\n\r\n  return deltax + deltay;\r\n};\r\n\r\nconst getDistance = (nodeOne, nodeTwo) => {\r\n  let currentCoordinates = nodeOne.id.split(\"-\");\r\n  let targetCoordinates = nodeTwo.id.split(\"-\");\r\n  let x1 = parseInt(currentCoordinates[0]);\r\n  let y1 = parseInt(currentCoordinates[1]);\r\n  let x2 = parseInt(targetCoordinates[0]);\r\n  let y2 = parseInt(targetCoordinates[1]);\r\n  if (x2 < x1) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [1, [\"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"l\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"r\", \"f\"], \"up\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n    }\r\n  } else if (x2 > x1) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [2, [\"r\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [2, [\"l\", \"f\"], \"down\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [1, [\"f\"], \"down\"];\r\n    }\r\n  }\r\n  if (y2 < y1) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [1, [\"f\"], \"left\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"r\", \"f\"], \"left\"];\r\n    }\r\n  } else if (y2 > y1) {\r\n    if (nodeOne.direction === \"up\") {\r\n      return [2, [\"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"right\") {\r\n      return [1, [\"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"left\") {\r\n      return [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n    } else if (nodeOne.direction === \"down\") {\r\n      return [2, [\"l\", \"f\"], \"right\"];\r\n    }\r\n  }\r\n};\r\n\r\nexport default weightedAlgorithms;\r\n","import { addShortestPath } from \"../animations/shortestPathAnimation.js\";\r\n\r\n// ----------------FUNCTION FOR LAUNCHING INSTANT ANIMATIONS------------------\r\n\r\nconst launchInstantAnimations = (board, success, type) => {\r\n  const change = (currentNode, previousNode) => {\r\n    let currentNodeElement = document.getElementById(currentNode.id);\r\n    const specialClasses = [\r\n      `start`,\r\n      `shortest-path`,\r\n      `instantshortest-path`,\r\n      `instantshortest-path weight`,\r\n    ];\r\n    if (previousNode) {\r\n      let previousNodeElement = document.getElementById(previousNode.id);\r\n      if (!specialClasses.includes(previousNodeElement.className)) {\r\n        previousNodeElement.className =\r\n          previousNode.weight === 15\r\n            ? `instantvisited weight`\r\n            : `instantvisited`;\r\n      }\r\n    }\r\n  };\r\n\r\n  const shortestPathChange = (currentNode, previousNode) => {\r\n    let currentNodeElement = document.getElementById(currentNode.id);\r\n    if (type === `unweighted`) {\r\n      currentNodeElement.className = `shortest-path-unweighted`;\r\n    } else {\r\n      if (currentNode.direction === `up`) {\r\n        currentNodeElement.className = `shortest-path-up`;\r\n      } else if (currentNode.direction === `down`) {\r\n        currentNodeElement.className = `shortest-path-down`;\r\n      } else if (currentNode.direction === `right`) {\r\n        currentNodeElement.className = `shortest-path-right`;\r\n      } else if (currentNode.direction === `left`) {\r\n        currentNodeElement.className = `shortest-path-left`;\r\n      }\r\n    }\r\n\r\n    if (previousNode) {\r\n      let previousNodeElement = document.getElementById(previousNode.id);\r\n      previousNodeElement.className =\r\n        previousNode.weight === 15\r\n          ? `instantshortest-path weight`\r\n          : `instantshortest-path`;\r\n    } else {\r\n      let element = document.getElementById(board.start);\r\n      element.className = `startTransparent`;\r\n    }\r\n  };\r\n\r\n  let nodesToAnimate = [...board.nodesToAnimate];\r\n  let shortestPathNodes;\r\n  for (let currIndex = 0; currIndex < nodesToAnimate.length; currIndex++) {\r\n    if (currIndex === 0) change(nodesToAnimate[currIndex]);\r\n    else change(nodesToAnimate[currIndex], nodesToAnimate[currIndex - 1]);\r\n  }\r\n  board.nodesToAnimate = [];\r\n  if (success) {\r\n    addShortestPath(board, `draw`);\r\n    shortestPathNodes = board.shortestPathNodesToAnimate;\r\n  } else {\r\n    board.reset();\r\n    return;\r\n  }\r\n\r\n  let i;\r\n  for (i = 0; i < shortestPathNodes.length; i++) {\r\n    if (i === 0) shortestPathChange(shortestPathNodes[i]);\r\n    else shortestPathChange(shortestPathNodes[i], shortestPathNodes[i - 1]);\r\n  }\r\n  board.reset();\r\n  shortestPathChange(board.getNode(board.target), shortestPathNodes[i - 1]);\r\n  board.shortestPathNodesToAnimate = [];\r\n};\r\n\r\nexport default launchInstantAnimations;\r\n","import Node from \"../browser/Node.js\";\r\nimport mazeGenerator from \"../browser/animations/mazeGenerator.js\";\r\nimport randomMaze from \"../browser/mazeAlgorithms/randomMaze.js\";\r\nimport verticalSkew from \"../browser/mazeAlgorithms/verticalSkewMaze.js\";\r\nimport horizontalSkew from \"../browser/mazeAlgorithms/horizontalSkewMaze.js\";\r\nimport stairMaze from \"../browser/mazeAlgorithms/stairMaze.js\";\r\nimport unweightedAlgorithms from \"../browser/searchAlgorithms/unweightedAlgorithms.js\";\r\nimport launchAnimations from \"../browser/animations/launchAnimations.js\";\r\nimport weightedAlgorithms from \"../browser/searchAlgorithms/weightedAlgorithms.js\";\r\nimport launchInstantAnimations from \"../browser/animations/launchInstantAnimations.js\";\r\nconst gridContainer = document.querySelector(`.grid`);\r\nconst navbarContainer = document.querySelector(`.navbarContainer`);\r\nlet navHeight = navbarContainer.offsetHeight;\r\nconst mainContentContainer = document.querySelector(`.mainContentContainer`);\r\n\r\n//---------------FUNCTIONS---------------\r\n\r\n// ------------CONSTRUCTOR FOR BOARD OBJECT-----------------\r\n\r\nfunction Board(width, height) {\r\n  this.width = width;\r\n  this.height = height;\r\n  this.wallsAnimationArray = [];\r\n  this.algoComplete = false;\r\n  this.speed = `fast`;\r\n  this.algo = ``;\r\n  this.start = ``;\r\n  this.target = ``;\r\n  this.allNodesArray = [];\r\n  this.nodesToAnimate = [];\r\n  this.tutorialContentArray = [];\r\n  this.pressedNodeStatus = `normal`;\r\n  this.mouseDown = false;\r\n  this.keyDown = false;\r\n  this.buttonsActivated = false;\r\n  this.shortestPathNodesToAnimate = [];\r\n  this.previouslyPressedNodeStatus = null;\r\n  this.previouslySwitchedNode = null;\r\n  this.previouslySwitchedNodeWeight = 0;\r\n}\r\n\r\n// --------------------FUNCTION FOR INITIALIZING BOARD AREA----------------\r\n\r\nBoard.prototype.initialize = function () {\r\n  this.contentInitialize();\r\n  this.createGrid();\r\n  this.addEventListeners();\r\n  this.tutorialWork();\r\n  this.restOfListeners();\r\n};\r\n\r\n// -----------FUNCTION FOR CREATING GRID----------------\r\n\r\nBoard.prototype.createGrid = function () {\r\n  let htmlOfGrid = ``;\r\n  for (let row = 0; row < this.height; row++) {\r\n    let gridRow = `<tr id = \"row_${row}\">`;\r\n    const allNodesRowArray = [];\r\n    for (let col = 0; col < this.width; col++) {\r\n      const id = `${row}-${col}`;\r\n      let nodeStatus;\r\n      if (\r\n        row === Math.floor(this.height / 2) &&\r\n        col === Math.floor(this.width / 4) &&\r\n        this.start.length === 0\r\n      ) {\r\n        nodeStatus = `start`;\r\n        this.start = `${id}`;\r\n      } else if (\r\n        row === Math.floor(this.height / 2) &&\r\n        col === Math.floor((3 * this.width) / 4) &&\r\n        this.target.length === 0\r\n      ) {\r\n        nodeStatus = `target`;\r\n        this.target = `${id}`;\r\n      } else {\r\n        nodeStatus = `unvisited`;\r\n      }\r\n      const newNode = new Node(id, nodeStatus);\r\n      allNodesRowArray.push(newNode);\r\n      gridRow += `<td id=\"${id}\" class=\"${nodeStatus}\"></td>`;\r\n    }\r\n    htmlOfGrid += `${gridRow}</tr>`;\r\n    this.allNodesArray.push(allNodesRowArray);\r\n  }\r\n  gridContainer.innerHTML = htmlOfGrid;\r\n};\r\n\r\n// -----------------------FUNCTION FOR ADDING LISTENERS TO GRID --------------\r\n\r\nBoard.prototype.addEventListeners = function () {\r\n  for (let row = 0; row < this.height; row++) {\r\n    for (let col = 0; col < this.width; col++) {\r\n      const currentNodeId = `${row}-${col}`;\r\n      const currentNodeElement = document.getElementById(currentNodeId);\r\n      const currentNode = this.allNodesArray[row][col];\r\n\r\n      currentNodeElement.addEventListener(`mousedown`, (e) => {\r\n        e.preventDefault();\r\n        if (this.buttonsActivated) {\r\n          this.mouseDown = true;\r\n          if (\r\n            currentNode.status === `start` ||\r\n            currentNode.status === `target`\r\n          ) {\r\n            this.pressedNodeStatus = currentNode.status;\r\n          } else {\r\n            this.pressedNodeStatus = `normal`;\r\n            this.changeNormalNode(currentNode, currentNodeElement);\r\n          }\r\n        }\r\n      });\r\n\r\n      currentNodeElement.addEventListener(`mouseup`, (e) => {\r\n        if (this.buttonsActivated) {\r\n          this.mouseDown = false;\r\n          if (this.pressedNodeStatus === `target`) this.target = currentNodeId;\r\n          else if (this.pressedNodeStatus === `start`)\r\n            this.start = currentNodeId;\r\n          this.pressedNodeStatus = `normal`;\r\n        }\r\n      });\r\n\r\n      currentNodeElement.addEventListener(`mouseenter`, (e) => {\r\n        if (this.buttonsActivated) {\r\n          if (this.mouseDown && this.pressedNodeStatus !== `normal`) {\r\n            this.changeSpecialNode(currentNode, currentNodeElement);\r\n            if (this.pressedNodeStatus === `target`) {\r\n              this.target = currentNodeId;\r\n              if (this.algoComplete) this.redoAlgo();\r\n            } else if (this.pressedNodeStatus === `start`) {\r\n              this.start = currentNodeId;\r\n              if (this.algoComplete) this.redoAlgo();\r\n            }\r\n          } else if (this.mouseDown) {\r\n            this.changeNormalNode(currentNode, currentNodeElement);\r\n          }\r\n        }\r\n      });\r\n\r\n      currentNodeElement.addEventListener(`mouseleave`, (e) => {\r\n        if (this.buttonsActivated) {\r\n          if (this.mouseDown && this.pressedNodeStatus !== `normal`) {\r\n            this.changeSpecialNode(currentNode, currentNodeElement);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\n// --------------FUNCTION FOR DEALING WITH START AND TARGET NODES------------\r\n\r\nBoard.prototype.changeSpecialNode = function (currentNode, currentNodeElement) {\r\n  let previousElement;\r\n  if (this.previouslySwitchedNode)\r\n    previousElement = document.getElementById(this.previouslySwitchedNode.id);\r\n  if (currentNode.status !== `target` && currentNode.status !== `start`) {\r\n    if (this.previouslySwitchedNode) {\r\n      this.previouslySwitchedNode.status = this.previouslyPressedNodeStatus;\r\n      previousElement.className =\r\n        this.previouslySwitchedNodeWeight === 15\r\n          ? `unvisited weight`\r\n          : this.previouslyPressedNodeStatus;\r\n      this.previouslySwitchedNode.weight =\r\n        this.previouslySwitchedNodeWeight === 15 ? 15 : 0;\r\n      this.previouslySwitchedNode = null;\r\n      this.previouslySwitchedNodeWeight = currentNode.weight;\r\n      this.previouslyPressedNodeStatus = currentNode.status;\r\n      currentNodeElement.className = this.pressedNodeStatus;\r\n      currentNode.status = this.pressedNodeStatus;\r\n      currentNode.weight = 0;\r\n    }\r\n  } else if (\r\n    currentNode.status !== this.pressedNodeStatus &&\r\n    !this.algoComplete\r\n  ) {\r\n    this.previouslySwitchedNode.status = this.pressedNodeStatus;\r\n    previousElement.className = this.pressedNodeStatus;\r\n  } else if (currentNode.status === this.pressedNodeStatus) {\r\n    this.previouslySwitchedNode = currentNode;\r\n    currentNodeElement.className = this.previouslyPressedNodeStatus;\r\n    currentNode.status = this.previouslyPressedNodeStatus;\r\n  }\r\n};\r\n\r\n// --------------FUNCTION FOR DEALING WITH WALLS AND WEIGHTS------------\r\n\r\nBoard.prototype.changeNormalNode = function (currNode, currNodeElement) {\r\n  const specialNodes = [`start`, `target`];\r\n  const unweightedalgos = [`breadthfirst`, `depthfirst`];\r\n  if (!this.keyDown) {\r\n    if (!specialNodes.includes(currNode.status)) {\r\n      currNodeElement.className =\r\n        currNode.status !== `wall` ? `wall` : `unvisited`;\r\n      currNode.status =\r\n        currNodeElement.className !== `wall` ? `unvisited` : `wall`;\r\n      currNode.weight = 0;\r\n    }\r\n  } else if (this.keyDown === 87 && !unweightedalgos.includes(this.algo)) {\r\n    if (!specialNodes.includes(currNode.status)) {\r\n      currNodeElement.className =\r\n        currNode.weight !== 15 ? `unvisited weight` : `unvisited`;\r\n      currNode.weight =\r\n        currNodeElement.className !== `unvisited weight` ? 0 : 15;\r\n      currNode.status = `unvisited`;\r\n    }\r\n  }\r\n};\r\n\r\n// -------------FUNCTION FOR ACCESSING NODE OF PROVIDED ID---------------\r\n\r\nBoard.prototype.getNode = function (id) {\r\n  const [i, j] = id.split(`-`);\r\n  return this.allNodesArray[i][j];\r\n};\r\n\r\n// ----------------------FUNCTION FOR REDOING AN ALGORITHM---------------------\r\n\r\nBoard.prototype.redoAlgo = function () {\r\n  this.clearPath();\r\n  this.instantAlgorithm();\r\n};\r\n\r\n// ---------------FUNCTION FOR RUNNING AN ALGORITHM INSTANTLY----------------------------\r\n\r\nBoard.prototype.instantAlgorithm = function () {\r\n  let success;\r\n  if (this.algo === `astar`) {\r\n    success = weightedAlgorithms(this, this.algo);\r\n    launchInstantAnimations(this, success, `weighted`);\r\n  } else if (this.algo === `dijkstra`) {\r\n    success = weightedAlgorithms(this, this.algo);\r\n    launchInstantAnimations(this, success, `weighted`);\r\n  } else if (this.algo === `bestfirst`) {\r\n    success = weightedAlgorithms(this, this.algo);\r\n    launchInstantAnimations(this, success, `weighted`);\r\n  } else if (this.algo === `breadthfirst`) {\r\n    this.clearWeights();\r\n    success = unweightedAlgorithms(this, this.algo);\r\n    launchInstantAnimations(this, success, `unweighted`);\r\n  } else if (this.algo === `depthfirst`) {\r\n    this.clearWeights();\r\n    success = unweightedAlgorithms(this, this.algo);\r\n    launchInstantAnimations(this, success, `unweighted`);\r\n  }\r\n  this.algoComplete = true;\r\n};\r\n\r\n// -----------------------FUNCTIONS FOR CLEARING WALLS AND WEIGHTS AND SETTING THE BOARD TO IT'S INITIAL STATE---------------\r\n\r\n// -----------FUNCTION FOR CLEARING WALLS AND WEIGHTS -------------------\r\n\r\nBoard.prototype.clearWallsAndWeights = function () {\r\n  this.clearPath();\r\n  for (let row = 0; row < this.height; row++) {\r\n    for (let col = 0; col < this.width; col++) {\r\n      const currentNode = this.allNodesArray[row][col];\r\n      if (currentNode.status === `wall` || currentNode.weight === 15) {\r\n        let currentNodeElement = document.getElementById(`${row}-${col}`);\r\n        currentNodeElement.className = `unvisited`;\r\n        currentNode.status = `unvisited`;\r\n        currentNode.weight = 0;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ----------------FUNCTION FOR CLEARING WEIGHTS--------------------\r\n\r\nBoard.prototype.clearWeights = function () {\r\n  for (let row = 0; row < this.height; row++) {\r\n    for (let col = 0; col < this.width; col++) {\r\n      const currentNode = this.allNodesArray[row][col];\r\n      if (currentNode.weight === 15) {\r\n        let currentNodeElement = document.getElementById(`${row}-${col}`);\r\n        currentNodeElement.className = `unvisited`;\r\n        currentNode.status = `unvisited`;\r\n        currentNode.weight = 0;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// ------------------FUNCTION FOR CLEARING NODE STATUS------------------\r\n//why not weights?\r\nBoard.prototype.clearStatus = function () {\r\n  const specialStatus = [`wall`, `start`, `target`];\r\n  for (let row = 0; row < this.height; row++) {\r\n    for (let col = 0; col < this.width; col++) {\r\n      const currentNode = this.allNodesArray[row][col];\r\n      currentNode.previousNode = null;\r\n      currentNode.direction = null;\r\n      currentNode.distance = Infinity;\r\n      currentNode.totalDistance = Infinity;\r\n      currentNode.heuristicDistance = null;\r\n      if (!specialStatus.includes(currentNode.status)) {\r\n        currentNode.status = `unvisited`;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// -----------------FUNCTION FOR CLEARING PATH------------------------\r\n\r\nBoard.prototype.clearPath = function () {\r\n  let startNode = this.getNode(this.start);\r\n  let targetNode = this.getNode(this.target);\r\n  startNode.status = `start`;\r\n  let startNodeElement = document.getElementById(this.start);\r\n  startNodeElement.className = `start`;\r\n  targetNode.status = `target`;\r\n  let targetNodeElement = document.getElementById(this.target);\r\n  targetNodeElement.className = `target`;\r\n  this.algoComplete = false;\r\n  const specialStatus = [`wall`, `start`, `target`];\r\n  for (let row = 0; row < this.height; row++) {\r\n    for (let col = 0; col < this.width; col++) {\r\n      let currentNode = this.allNodesArray[row][col];\r\n      let currentNodeElement = document.getElementById(`${row}-${col}`);\r\n      currentNode.previousNode = null;\r\n      currentNode.distance = Infinity;\r\n      currentNode.totalDistance = Infinity;\r\n      currentNode.heuristicDistance = null;\r\n      currentNode.direction = null;\r\n\r\n      if (currentNode.weight === 15) {\r\n        currentNode.status = `unvisited`;\r\n        currentNodeElement.className = `unvisited weight`;\r\n      } else if (!specialStatus.includes(currentNode.status)) {\r\n        currentNode.status = `unvisited`;\r\n        currentNodeElement.className = `unvisited`;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nBoard.prototype.reset = function () {\r\n  this.getNode(this.start).status = `start`;\r\n  document.getElementById(this.start).className = `startTransparent`;\r\n  this.getNode(this.target).status = `target`;\r\n};\r\n\r\n// ---------------FUNCTION FOR PROVIDING TEXT FOR TUTORIAL-------------\r\n\r\nlet counter = 0;\r\n\r\nBoard.prototype.contentInitialize = function () {\r\n  this.tutorialContentArray.push(\r\n    `<h1>Welcome to Pathfinding Visualizer!</h1>\r\n        <h2>\r\n          This short tutorial will walk you through all of the features of this\r\n          application.\r\n        </h2>\r\n        <p>\r\n          If you want to dive right in, feel free to press the \"Skip Tutorial\"\r\n          button below. Otherwise, press \"Next\"!\r\n        </p>\r\n        <div class=\"pageCounter\">1/7</div>\r\n        <p>If you want to see the source code for this application, check out my <a  href=\"https://github.com/somyaguglani/Pathfinding-Visualizer\" >github </a></p>\r\n        <img style=\" height:150px;\" src=\"../styling/imagesAndSvg/c_icon.png\" alt=\"startingIcon\">\r\n\r\n        <div class =\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`\r\n  );\r\n  this.tutorialContentArray.push(`<h1>What is a pathfinding algorithm?</h1>\r\n        <h2>\r\n        At its core, a pathfinding algorithm seeks to find the shortest path between two points. This application visualizes various pathfinding algorithms in action, and more!\r\n        </h2>\r\n        <p>\r\n        All of the algorithms on this application are adapted for a 2D grid, where 90 degree turns have a \"cost\" of 1 and movements from a node to another have a \"cost\" of 1.\r\n        </p>\r\n        <div class=\"pageCounter\">2/7</div>\r\n        <img src=\"../styling/imagesAndSvg/path.png\" alt=\"path\">\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`);\r\n  this.tutorialContentArray.push(`<h1>Picking an algorithm</h1>\r\n        <h2>\r\n        Choose an algorithm from the \"Algorithms\" drop-down menu.\r\n        </h2>\r\n        <p>\r\n       Note that some algorithms are <strong>unweighted</strong>, while others are <strong>weighted</strong>. Unweighted algorithms do not take turns or weight nodes into account, whereas weighted ones do. Additionally, not all algorithms guarantee the shortest path.\r\n        </p>\r\n        <div class=\"pageCounter\">3/7</div>\r\n        <img src=\"../styling/imagesAndSvg/algorithms.png\" alt=\"algoDemo\">\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`);\r\n  this.tutorialContentArray.push(`<h1>Meet the algorithms</h1>\r\n        <h2>\r\n       Not all algorithms are created equal.\r\n        </h2>\r\n        <p>\r\n     <strong> Dijkstra's Algorithm</strong> (weighted): the father of pathfinding algorithms; guarantees the shortest path\r\n     </br>\r\n <strong>A* Search  </strong>(weighted): arguably the best pathfinding algorithm; uses heuristics to guarantee the shortest path much faster than Dijkstra's Algorithm\r\n </br>\r\n <strong>Greedy Best-first Search  </strong>(weighted): a faster, more heuristic-heavy version of A*; does not guarantee the shortest path\r\n </br>\r\n <strong>Swarm Algorithm  </strong>(weighted): a mixture of Dijkstra's Algorithm and A*; does not guarantee the shortest-path\r\n </br>\r\n <strong>Convergent Swarm Algorithm </strong>(weighted) : the faster, more heuristic-heavy version of Swarm; does not guarantee the shortest path\r\n </br>\r\n <strong>Bidirectional Swarm Algorithm </strong> (weighted): Swarm from both sides; does not guarantee the shortest path\r\n </br>\r\n <strong>Breath-first Search </strong> (unweighted): a great algorithm; guarantees the shortest path\r\n </br>\r\n <strong>Depth-first Search </strong> (unweighted): a very bad algorithm for pathfinding; does not guarantee the shortest path\r\n        </p>\r\n        <div class=\"pageCounter\">4/7</div>\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`);\r\n  this.tutorialContentArray.push(`<h1>Adding walls and weights</h1>\r\n        <h3>\r\n       Click on the grid to add a wall. Click on W to add weights and again to stop. Generate mazes and patterns from the \"Mazes & Patterns\" drop-down menu.\r\n        </h3>\r\n        <p>\r\n       Walls are impenetrable, meaning that a path cannot cross through them. Weights, however, are not impassable. They are simply more \"costly\" to move through. In this application, moving through a weight node has a \"cost\" of 15.\r\n        </p>\r\n        <div class=\"pageCounter\">5/7</div>\r\n        <img src=\"../styling/imagesAndSvg/walls.gif\" alt=\"wallsDemo\">\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`);\r\n  this.tutorialContentArray.push(`<h1>Dragging nodes</h1>\r\n        <h2>\r\n    Click and drag the start, bomb, and target nodes to move them.\r\n        </h2>\r\n        <p>\r\n      Note that you can drag nodes even after an algorithm has finished running. This will allow you to instantly see different paths.\r\n        </p>\r\n        <div class=\"pageCounter\">6/7</div>\r\n        <img src=\"../styling/imagesAndSvg/dragging.gif\" alt=\"draggingDemo\">\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Next</button>\r\n        </div>`);\r\n  this.tutorialContentArray.push(`<h1>Visualizing and more</h1>\r\n        <h2>\r\n       Use the navbar buttons to visualize algorithms and to do other stuff!\r\n        </h2>\r\n        <p>\r\n      You can clear the current path, clear walls and weights, clear the entire board, and adjust the visualization speed, all from the navbar. If you want to access this tutorial again, click on \"Pathfinding Visualizer\" in the top left corner of your screen.\r\n        </p>\r\n        <div class=\"pageCounter\">7/7</div>\r\n        <img class = \"responsive-img\" src=\"../styling/imagesAndSvg/navbar.png\" alt=\"algoDemo\">\r\n        <h2>Now that you know everything, it's time to play around with the visualizer. Enjoy!</h2>\r\n        <div class=\"tutorialButtons\">\r\n          <button class=\"skipButton\">Skip Tutorial</button>\r\n          <button class=\"prevButton\">Previous</button>\r\n          <button class=\"nextButton\">Finish</button>\r\n        </div>`);\r\n};\r\n\r\n// ------------------FUNCTION FOR BUTTONS AND DYNAMIC CONTENT OF TUTORIAL MODAL--------------\r\n\r\nBoard.prototype.tutorialWork = function () {\r\n  const board = this;\r\n  const modal = document.querySelector(`.tuturialContainerModal`);\r\n  const modalInner = document.querySelector(`.modalInner`);\r\n  const tutorialButtonsFlex = document.querySelectorAll(`.tutorialButtons`);\r\n  const tutorialButtons = tutorialButtonsFlex[0].querySelectorAll(`button`);\r\n  tutorialButtons.forEach((button) => {\r\n    button.addEventListener(`click`, function (e) {\r\n      if (e.currentTarget.classList.value === `skipButton`) {\r\n        modal.style.display = `none`;\r\n        board.toggleButtons();\r\n      } else if (e.currentTarget.classList.value === `prevButton`) {\r\n        if (counter > 0) {\r\n          counter--;\r\n          modalInner.innerHTML = board.tutorialContentArray[counter];\r\n          board.tutorialWork();\r\n        }\r\n      } else if (e.currentTarget.classList.value === `nextButton`) {\r\n        if (counter === board.tutorialContentArray.length - 1) {\r\n          modal.style.display = `none`;\r\n          board.toggleButtons();\r\n          return;\r\n        }\r\n        if (counter < board.tutorialContentArray.length) {\r\n          counter++;\r\n          modalInner.innerHTML = board.tutorialContentArray[counter];\r\n          board.tutorialWork();\r\n        }\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n// ------------FUNCTION FOR ACTIVATING AND DEACTIVATING CLICKS FOR ALL BUTTONS-------------\r\n\r\nBoard.prototype.toggleButtons = function () {\r\n  this.buttonsActivated = !this.buttonsActivated;\r\n\r\n  const algoOptions = document.querySelectorAll(`.algoOptions`);\r\n  const mazes = document.querySelectorAll(`.maze`);\r\n  const speeds = document.querySelectorAll(`.speeds`);\r\n  const visualizeButton = document.querySelector(`.visualizeButton`);\r\n  const clearLinks = document.querySelectorAll(`.clearLinks`);\r\n\r\n  if (this.buttonsActivated === false) {\r\n    algoOptions.forEach((option) => {\r\n      option.classList.add(`activatedLink`);\r\n    });\r\n    mazes.forEach((maze) => {\r\n      maze.classList.add(`activatedLink`);\r\n    });\r\n    clearLinks.forEach((link) => {\r\n      link.classList.add(`activatedLink`);\r\n    });\r\n    speeds.forEach((speed) => {\r\n      speed.classList.add(`activatedLink`);\r\n    });\r\n\r\n    visualizeButton.classList.add(`activatedLink`);\r\n  } else {\r\n    algoOptions.forEach((option) => {\r\n      option.classList.remove(`activatedLink`);\r\n    });\r\n    mazes.forEach((maze) => {\r\n      maze.classList.remove(`activatedLink`);\r\n    });\r\n    clearLinks.forEach((link) => {\r\n      link.classList.remove(`activatedLink`);\r\n    });\r\n    speeds.forEach((speed) => {\r\n      speed.classList.remove(`activatedLink`);\r\n    });\r\n    visualizeButton.classList.remove(`activatedLink`);\r\n  }\r\n};\r\n\r\n// ------------FUNCTION FOR ATTACHING LISTENERS FOR REST OF THE BUTTONS------------\r\n\r\nBoard.prototype.restOfListeners = function () {\r\n  const logo = document.querySelector(`.refreshLogo`);\r\n  const dropDowns = document.querySelectorAll(`.dropDown`);\r\n  const visualizeButton = document.querySelector(`.visualizeButton`);\r\n  const algoDescription = document.querySelector(`.algoDescription`);\r\n  const algoOptions = document.querySelectorAll(`.algoOptions`);\r\n  const mazes = document.querySelectorAll(`.maze`);\r\n  const speeds = document.querySelectorAll(`.speeds`);\r\n  const clearBoard = document.getElementById(`clearBoard`);\r\n  const clearWallsAndWeights = document.getElementById(`clearWallsAndWeights`);\r\n  const clearPath = document.getElementById(`clearPath`);\r\n\r\n  logo.addEventListener(`click`, (e) => {\r\n    e.preventDefault();\r\n    location.reload();\r\n  });\r\n\r\n  dropDowns.forEach((linkButton) => {\r\n    linkButton.addEventListener(`click`, (e) => {\r\n      dropDowns.forEach((dropdown) => {\r\n        if (dropdown !== e.currentTarget) {\r\n          dropdown.classList.remove(`displayDropdown`);\r\n          const a = dropdown.querySelector(`a`);\r\n          a.classList.remove(`activatedLink`);\r\n        }\r\n      });\r\n\r\n      e.currentTarget.classList.toggle(`displayDropdown`);\r\n      const link = e.currentTarget.querySelector(`a`);\r\n      link.classList.toggle(`activatedLink`);\r\n    });\r\n  });\r\n\r\n  visualizeButton.addEventListener(`click`, (e) => {\r\n    if (this.buttonsActivated) {\r\n      if (this.algo.length === 0) {\r\n        e.currentTarget.innerHTML = `Pick an Algorithm!`;\r\n        return;\r\n      }\r\n      this.clearPath();\r\n      this.toggleButtons();\r\n      let success;\r\n      if (this.algo === `astar`) {\r\n        success = weightedAlgorithms(this, this.algo);\r\n        launchAnimations(this, success, `weighted`);\r\n      } else if (this.algo === `dijkstra`) {\r\n        success = weightedAlgorithms(this, this.algo);\r\n        launchAnimations(this, success, `weighted`);\r\n      } else if (this.algo === `bestfirst`) {\r\n        success = weightedAlgorithms(this, this.algo);\r\n        launchAnimations(this, success, `weighted`);\r\n      } else if (this.algo === `breadthfirst`) {\r\n        this.clearWeights();\r\n        success = unweightedAlgorithms(this, this.algo);\r\n        launchAnimations(this, success, `unweighted`);\r\n      } else if (this.algo === `depthfirst`) {\r\n        this.clearWeights();\r\n        success = unweightedAlgorithms(this, this.algo);\r\n        launchAnimations(this, success, `unweighted`);\r\n      }\r\n      this.algoComplete = true;\r\n    }\r\n  });\r\n\r\n  algoOptions.forEach((algo) => {\r\n    algo.addEventListener(`click`, (e) => {\r\n      if (this.buttonsActivated) {\r\n        this.algo = e.currentTarget.id;\r\n        const weightCancellable = document.querySelector(`.cancelable`);\r\n        if (this.algo === `astar`) {\r\n          weightCancellable.classList.remove(`cancelNow`);\r\n          visualizeButton.innerHTML = `Visualize A* !`;\r\n          algoDescription.innerHTML = `A* Search is <strong>weighted</strong> and <strong>guarantees</strong> the shortest path!`;\r\n        } else if (this.algo === `dijkstra`) {\r\n          weightCancellable.classList.remove(`cancelNow`);\r\n          visualizeButton.innerHTML = `Visualize Dijkstra's !`;\r\n          algoDescription.innerHTML = `Dijkstra's Algorithm is <strong>weighted</strong> and <strong>guarantees</strong> the shortest path!`;\r\n        } else if (this.algo === `bestfirst`) {\r\n          weightCancellable.classList.remove(`cancelNow`);\r\n          visualizeButton.innerHTML = `Visualize Greedy !`;\r\n          algoDescription.innerHTML = `Greedy Best-first Search is <strong>weighted</strong> and <strong>does not guarantee</strong> the shortest path!`;\r\n        } else if (this.algo === `breadthfirst`) {\r\n          weightCancellable.classList.add(`cancelNow`);\r\n          visualizeButton.innerHTML = `Visualize BFS !`;\r\n          algoDescription.innerHTML = `Breadth-first Search is <strong>unweighted</strong> and <strong>guarantees</strong> the shortest path!`;\r\n        } else if (this.algo === `depthfirst`) {\r\n          weightCancellable.classList.add(`cancelNow`);\r\n          visualizeButton.innerHTML = `Visualize DFS !`;\r\n          algoDescription.innerHTML = `Depth-first Search is <strong>unweighted</strong> and <strong>does not guarantee</strong> the shortest path!`;\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  mazes.forEach((maze) => {\r\n    maze.addEventListener(`click`, (e) => {\r\n      if (this.buttonsActivated) {\r\n        const currentMaze = e.currentTarget.id;\r\n        this.clearWallsAndWeights();\r\n        this.toggleButtons();\r\n        if (currentMaze === `verticalskew`) {\r\n          verticalSkew(\r\n            this,\r\n            2,\r\n            this.height - 3,\r\n            2,\r\n            this.width - 3,\r\n            \"vertical\",\r\n            false\r\n          );\r\n          mazeGenerator(this);\r\n        } else if (currentMaze === `horizontalskew`) {\r\n          horizontalSkew(\r\n            this,\r\n            2,\r\n            this.height - 3,\r\n            2,\r\n            this.width - 3,\r\n            \"horizontal\",\r\n            false\r\n          );\r\n          mazeGenerator(this);\r\n        } else if (currentMaze === `randomwall`) {\r\n          randomMaze(this, `wall`);\r\n        } else if (currentMaze === `randomweight`) {\r\n          randomMaze(this, `weight`);\r\n        } else if (currentMaze === `stair`) {\r\n          stairMaze(this);\r\n          mazeGenerator(this);\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  clearBoard.addEventListener(`click`, (e) => {\r\n    if (this.buttonsActivated) {\r\n      let contentHeight = mainContentContainer.offsetHeight;\r\n      let docHeight = document.documentElement.scrollHeight;\r\n      let docWidth = document.documentElement.scrollWidth;\r\n      let height = Math.floor((docHeight - contentHeight - navHeight) / 24);\r\n      let width = Math.floor(docWidth / 23);\r\n      let start =\r\n        Math.floor(height / 2).toString() +\r\n        `-` +\r\n        Math.floor(width / 4).toString();\r\n      let target =\r\n        Math.floor(height / 2).toString() +\r\n        `-` +\r\n        Math.floor((3 * width) / 4).toString();\r\n\r\n      for (let row = 0; row < this.height; row++) {\r\n        for (let col = 0; col < this.width; col++) {\r\n          let currentNode = board.allNodesArray[row][col];\r\n          let currentNodeElement = document.getElementById(`${row}-${col}`);\r\n          if (`${row}-${col}` === start) {\r\n            currentNodeElement.className = `start`;\r\n            currentNode.status = `start`;\r\n          } else if (`${row}-${col}` === target) {\r\n            currentNodeElement.className = `target`;\r\n            currentNode.status = `target`;\r\n          } else {\r\n            currentNodeElement.className = `unvisited`;\r\n            currentNode.status = `unvisited`;\r\n          }\r\n\r\n          this.weight = 0;\r\n          this.previousNode = null;\r\n          this.direction = null;\r\n          this.distance = Infinity;\r\n          this.totalDistance = Infinity;\r\n          this.heuristicDistance = null;\r\n          this.path = null;\r\n          this.direction = null;\r\n        }\r\n      }\r\n      this.wallsAnimationArray = [];\r\n      this.algoComplete = false;\r\n      this.start = start;\r\n      this.target = target;\r\n      this.nodesToAnimate = [];\r\n      this.pressedNodeStatus = `normal`;\r\n      this.mouseDown = false;\r\n      this.keyDown = false;\r\n      this.shortestPathNodesToAnimate = [];\r\n      this.previouslyPressedNodeStatus = null;\r\n      this.previouslySwitchedNode = null;\r\n      this.previouslySwitchedNodeWeight = 0;\r\n    }\r\n  });\r\n\r\n  clearWallsAndWeights.addEventListener(`click`, (e) => {\r\n    if (this.buttonsActivated) {\r\n      this.clearWallsAndWeights();\r\n    }\r\n  });\r\n\r\n  clearPath.addEventListener(`click`, (e) => {\r\n    if (this.buttonsActivated) {\r\n      this.clearPath();\r\n    }\r\n  });\r\n\r\n  speeds.forEach((speed) => {\r\n    speed.addEventListener(`click`, (e) => {\r\n      if (this.buttonsActivated) {\r\n        this.speed = e.currentTarget.id;\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\n//----------------MAKING BOARD OBJECT-------------\r\n\r\nlet contentHeight = mainContentContainer.offsetHeight;\r\nlet docHeight = document.documentElement.scrollHeight;\r\nlet docWidth = document.documentElement.scrollWidth;\r\nlet height = Math.floor((docHeight - contentHeight - navHeight) / 24);\r\nlet width = Math.floor(docWidth / 23);\r\nlet board = new Board(width, height);\r\nboard.initialize();\r\n\r\n// ------------EVENT LISTENERS-------------------\r\n\r\nwindow.addEventListener(`keydown`, (e) => {\r\n  if (board.keyDown) {\r\n    board.keyDown = false;\r\n  } else {\r\n    board.keyDown = e.keyCode;\r\n  }\r\n});\r\nexport default board.getNode;\r\n"]}